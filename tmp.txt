diff --git a/.gitignore b/.gitignore
index 1db7c28..3e1f2a2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -35,4 +35,5 @@ lerna-debug.log*
 !.vscode/extensions.json
 
 # Env
-.env
\ No newline at end of file
+.env
+.envrc
\ No newline at end of file
diff --git a/README.md b/README.md
index 910db9e..785227e 100644
--- a/README.md
+++ b/README.md
@@ -1,68 +1,72 @@
-## Description
+# AngelOn API
 
-AngelOn API is the backend implementation for the AngelOn application.
+AngelOn API is the backend implementation for the [AngelOn suite]().
 
-We are using Nest.js framework providing us Node.js, TypeScript, Fastify, Prisma.
+REST services provided using [Nest.js framework](http://nestjs.com) and other [Tools]().
 
-## Installation
+- - - - - - - -
+
+## Deployment
+
+AngelOn currently uses *MongoDB* database through 
+
+We **recommend** you to use [*MongoDB Atlas*](https://www.mongodb.com/atlas/database). Their free tier service will allow you to deploy MongoDB using the provider and region of your choice between *AWS*, *Google* and *Azure*.
+
+If you are going to deploy MongoDb manually, be sure to a [replica set](https://www.mongodb.com/docs/manual/replication/).
+
+### Installing
 
 ```bash
 $ npm install
 ```
 
-## Deployment
 
-    [   ] Docker instructions
-
-## Running the app
+### Running
 
 ```bash
 # development
 $ npm run start
 
-# watch mode
-$ npm run start:dev
-
 # production mode
 $ npm run start:prod
 ```
 
-## Test
+### Testing
 
 ```bash
 # unit tests
 $ npm run test
+```
 
-# e2e tests
-$ npm run test:e2e
+- - - - - - - -
 
-# test coverage
-$ npm run test:cov
-```
+## Engaging
+
+### Commit
 
-## Donate
+We ask you to commit your changes through a pull request in our [Github repository]().
 
-AngelOn is an open source project. You are free to use, modify and redistribuite this code. May God bless you and your church with this work.
+### Donate
 
-Would you like to give back by sponsoring and supporting this project, any ammount will help, even nothing (with prayers). [Read more about donating for this project.]
+Would you like to give back by sponsoring and donating to this project, any ammount will greatly appretiated. [Read more about donating for this project.]()
 
-## Support 
+<!-- 3 , 9, 18  -->
 
-AngelOn is provided without any warrante or promise of support. Please, join our community on Discord where we support each other.
+### Support 
 
-Professional services are available
+AngelOn is an open source project. You are free to use, modify and redistribute this code. 
 
+Professional services are available, [tell me how can I help you]().
 
-## Stay in touch
+### Contact
 
 - Author - [Gleidson LM](https://linkedin.com/in/gleidsonlm)
 - Discord channel - [AngelOn]()
 
-## License
+- - - - - - - - - -
+
+## Greetings
 
-Nest is [MIT licensed](LICENSE).
+May God bless you and your church with this work, as Jesus told John on [Revelation 22:16:](https://biblehub.com/interlinear/revelation/22-16.htm)
 
-## Powered by 
-<p align="center">
-  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="50" alt="Nest Logo" /></a>
-</p>
\ No newline at end of file
+> "I, Jesus, have sent my messenger (koiné: ἄγγελόν) to give you this testimony for the churches. I am the Root and the Offspring of David, the bright Morning Star." 
diff --git a/docker/README.md b/docker/README.md
deleted file mode 100644
index 782046b..0000000
--- a/docker/README.md
+++ /dev/null
@@ -1,46 +0,0 @@
-# Docker
-
-See [the Docker Compose configurations for our tests databases locally and also used by GitHub Actions in CI](./docker-compose.yml).
-
-## Using docker-compose for databases
-
-This is only intended to be run in a development environment where ports 27017 / default for MongoDB are free and not used.
-
-If they are already used make sure to change the ports like this
-
-```yaml
-ports:
-  - '27019:27017' # only change the first number
-```
-
-## Usage
-
-### Start
-
-In detached/background mode using `-d` (recommended)
-
-```sh
-docker-compose up -d
-# Or start only one service
-docker-compose up -d angelondb
-# To see logs
-docker-compose logs -f angelondb
-```
-
-In attached mode, the logs will be streamed in the terminal:
-
-```sh
-docker-compose up
-```
-
-### Stop
-
-```sh
-docker-compose down
-```
-
-### Delete all
-
-```sh
-docker-compose down -v --rmi all --remove-orphans
-```
diff --git a/docker/angelondb_migrate_seed/Dockerfile b/docker/angelondb_migrate_seed/Dockerfile
deleted file mode 100644
index c23a432..0000000
--- a/docker/angelondb_migrate_seed/Dockerfile
+++ /dev/null
@@ -1,7 +0,0 @@
-FROM mongo
-
-COPY init.json /init.json
-
-# https://docs.mongodb.com/database-tools/mongoimport/
-# Drop and import collection
-CMD mongoimport --uri mongodb://root:prisma@angelondb_migrate:27017/angelondb?authSource=admin --drop --collection users --type json --file /init.json --jsonArray
diff --git a/docker/angelondb_migrate_seed/init.json b/docker/angelondb_migrate_seed/init.json
deleted file mode 100644
index fa4edd3..0000000
--- a/docker/angelondb_migrate_seed/init.json
+++ /dev/null
@@ -1,14 +0,0 @@
-[
-  {
-  "id": "_test_admin",
-  "email": "_test_admin@angelon.app",
-  "name":"Test Admin",
-  "role": "ADMIN"
-  },
-  {
-    "id": "_test_user",
-    "email": "_test_user@angelon.app",
-    "name":"Test User",
-    "role": "USER"
-  }
-]
diff --git a/docker/angelondb_replica/Dockerfile b/docker/angelondb_replica/Dockerfile
deleted file mode 100644
index e7dc013..0000000
--- a/docker/angelondb_replica/Dockerfile
+++ /dev/null
@@ -1,11 +0,0 @@
-FROM mongo
-
-# we take over the default & start mongo in replica set mode in a background task
-ENTRYPOINT mongod --port $MONGO_REPLICA_PORT --replSet rs0 --bind_ip 0.0.0.0 & MONGOD_PID=$!; \
-# we prepare the replica set with a single node and prepare the root user config
-INIT_REPL_CMD="rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: '$MONGO_REPLICA_HOST:$MONGO_REPLICA_PORT' }] })"; \
-INIT_USER_CMD="db.createUser({ user: '$MONGO_INITDB_ROOT_USERNAME', pwd: '$MONGO_INITDB_ROOT_PASSWORD', roles: [ 'root' ] })"; \
-# we wait for the replica set to be ready and then submit the commands just above
-until (mongo admin --port $MONGO_REPLICA_PORT --eval "$INIT_REPL_CMD && $INIT_USER_CMD"); do sleep 1; done; \
-# we are done but we keep the container by waiting on signals from the mongo task
-echo "REPLICA SET ONLINE"; wait $MONGOD_PID;
diff --git a/docker/docker-compose.override.yml b/docker/docker-compose.override.yml
deleted file mode 100644
index e69de29..0000000
diff --git a/docker/docker-compose.yml b/docker/docker-compose.yml
deleted file mode 100644
index a51b363..0000000
--- a/docker/docker-compose.yml
+++ /dev/null
@@ -1,30 +0,0 @@
-version: '3.7'
-
-services:
-# For connection urls to the following instances, see
-# https://github.com/prisma/prisma/blob/main/TESTING.md#environment-variables
-  angelondb_migrate:
-    image: mongo
-    restart: always
-    environment:
-      MONGO_INITDB_ROOT_USERNAME: root
-      MONGO_INITDB_ROOT_PASSWORD: prisma
-      MONGO_INITDB_DATABASE: angelondb
-    ports:
-      - '27017:27017'
-
-  angelondb_migrate_seed:
-    build: ./angelondb_migrate_seed
-    depends_on:
-      - angelondb_migrate
-
-  # Replica Set (required for Prisma Client)
-  angelondb:
-    build: ./angelondb_replica
-    environment:
-      MONGO_INITDB_ROOT_USERNAME: root
-      MONGO_INITDB_ROOT_PASSWORD: prisma
-      MONGO_REPLICA_HOST: localhost
-      MONGO_REPLICA_PORT: 27018
-    ports:
-      - '27018:27018'
\ No newline at end of file
diff --git a/package.json b/package.json
index 797a9d3..8aef7c0 100644
--- a/package.json
+++ b/package.json
@@ -67,5 +67,8 @@
     ],
     "coverageDirectory": "../coverage",
     "testEnvironment": "node"
+  },
+  "prisma": {
+    "schema":"./src/shared/database/prisma/schema.prisma"
   }
 }
diff --git a/src/shared/database/index.ts b/src/shared/database/index.ts
index 1940f6d..066ef53 100644
--- a/src/shared/database/index.ts
+++ b/src/shared/database/index.ts
@@ -1,25 +1,3 @@
 import { PrismaClient } from '@prisma/client';
 
 export const document = new PrismaClient();
-
-async function main() {
-  //Connect the mongodb client
-  await document.$connect();
-
-  // Get all users
-  const users = await document.user.findMany();
-
-  // Get all posts
-  // const contents = await document.content.findMany();
-  console.log(users);
-}
-
-main()
-  .then(async () => {
-    console.log('Done');
-  })
-  .catch(async (error) => {
-    console.log(error);
-    await document.$disconnect();
-    process.exit(1);
-  });
diff --git a/src/shared/database/prisma/schema.prisma b/src/shared/database/prisma/schema.prisma
index 3ebddbc..595ef13 100644
--- a/src/shared/database/prisma/schema.prisma
+++ b/src/shared/database/prisma/schema.prisma
@@ -14,8 +14,8 @@ model User {
   id      String   @id @default(auto()) @map("_id") @db.ObjectId
   email   String   @unique
   password  String
-  mobile  String?
   name    String?
+  mobile  String?
   created DateTime
   updated  DateTime?
   excluded DateTime?
diff --git a/src/users/dto/create-user.dto.ts b/src/users/dto/create-user.dto.ts
index dd9545e..d5ce8c6 100644
--- a/src/users/dto/create-user.dto.ts
+++ b/src/users/dto/create-user.dto.ts
@@ -2,8 +2,8 @@ import { PartialType } from '@nestjs/mapped-types';
 import { User } from '../entities/user.entity';
 
 export class CreateUserDto extends PartialType(User) {
-  username: string;
+  email: string;
   password: string;
-  email?: string;
   name?: string;
+  mobile?: string;
 }
diff --git a/src/users/dto/update-user.dto.ts b/src/users/dto/update-user.dto.ts
index 6b8e477..41b789f 100644
--- a/src/users/dto/update-user.dto.ts
+++ b/src/users/dto/update-user.dto.ts
@@ -2,8 +2,7 @@ import { PartialType } from '@nestjs/mapped-types';
 import { User } from '../entities/user.entity';
 
 export class UpdateUserDto extends PartialType(User) {
-  username?: string;
   password?: string;
-  email?: string;
   name?: string;
+  mobile?: string;
 }
diff --git a/src/users/entities/user.entity.ts b/src/users/entities/user.entity.ts
index 30d312e..4eef280 100644
--- a/src/users/entities/user.entity.ts
+++ b/src/users/entities/user.entity.ts
@@ -1,23 +1,21 @@
-import { randomUUID } from 'node:crypto';
 import { IUser } from '../interfaces/user.interface';
 
 export class User implements IUser {
   id: string;
-  username: string;
-  password: string;
   email: string;
+  password: string;
   name: string;
+  mobile: string;
   role: string;
-  createdAt: Date;
-  updatedAt: Date;
-  excludedAt: Date | null;
+  created: Date;
+  updated: Date;
+  excluded: Date;
 
   constructor(data: Partial<User>) {
     Object.assign(this, data);
-    this.id = randomUUID();
     this.role = 'USER';
-    this.createdAt = new Date();
-    this.updatedAt = this.createdAt;
-    this.excludedAt = null;
+    this.created = new Date();
+    this.updated = null;
+    this.excluded = null;
   }
 }
diff --git a/src/users/interfaces/user.interface.ts b/src/users/interfaces/user.interface.ts
index c6bab3e..e02b042 100644
--- a/src/users/interfaces/user.interface.ts
+++ b/src/users/interfaces/user.interface.ts
@@ -1,8 +1,8 @@
 export interface IUser {
   id: string;
   email: string;
-  password: string;
-  mobile: number | null;
+  password: string | null;
+  mobile: string | null;
   name: string | null;
   created: Date;
   updated: Date | null;
diff --git a/src/users/repositories/IUsersRepositories.ts b/src/users/repositories/IUsersRepositories.ts
index 08d0ebf..6fe8877 100644
--- a/src/users/repositories/IUsersRepositories.ts
+++ b/src/users/repositories/IUsersRepositories.ts
@@ -7,7 +7,6 @@ export interface IUsersRepository {
   create(data: CreateUserDto): Promise<User>;
   findAll(): Promise<User[]>;
   findOneById(id: string): Promise<User>;
-  findOneByUsername(username: string): Promise<User>;
   findOneByEmail(email: string): Promise<User>;
   update(id: string, data: UpdateUserDto): Promise<User>;
   exclude(id: string): Promise<void>;
diff --git a/src/users/repositories/implementations/InMemoryUsersRepository.ts b/src/users/repositories/implementations/InMemoryUsersRepository.ts
index 87255a9..70267f2 100644
--- a/src/users/repositories/implementations/InMemoryUsersRepository.ts
+++ b/src/users/repositories/implementations/InMemoryUsersRepository.ts
@@ -33,22 +33,16 @@ export class InMemoryUsersRepository implements IUsersRepository {
     return user;
   }
 
-  async findOneByUsername(username: string): Promise<User> {
-    const user = this.users.find((user) => user.username === username);
-
-    return user;
-  }
-
   async update(id: string, data: UpdateUserDto): Promise<User> {
     // assign received value in data to existent user
     const user = this.users.find((user) => user.id === id);
 
     Object.assign(user, data);
-    data.username ? (user.username = data.username) : user.username;
     data.email ? (user.email = data.email) : user.email;
     data.password ? (user.password = data.password) : user.password;
     data.name ? (user.name = data.name) : user.name;
-    data.updatedAt = new Date();
+    data.mobile ? (user.mobile = data.mobile) : user.mobile;
+    data.updated = new Date();
 
     return user;
   }
@@ -57,6 +51,6 @@ export class InMemoryUsersRepository implements IUsersRepository {
     // update user excludedAt to now
     const user = this.users.find((user) => user.id === id);
 
-    user.excludedAt = new Date();
+    user.excluded = new Date();
   }
 }
diff --git a/src/users/users.service.spec.ts b/src/users/users.service.spec.ts
index 7004fd9..1238689 100644
--- a/src/users/users.service.spec.ts
+++ b/src/users/users.service.spec.ts
@@ -1,16 +1,13 @@
 import { Test, TestingModule } from '@nestjs/testing';
 import { CreateUserDto } from './dto/create-user.dto';
-import { IUser } from './interfaces/user.interface';
+import { User } from './entities/user.entity';
 import { UsersService } from './users.service';
 
 describe('UsersService', () => {
   let usersService: UsersService;
   const data: CreateUserDto = {
-    username: 'john.doe',
     password: 'Password.42',
     email: 'john.doe@angelon.app',
-    name: 'John Doe',
-    role: 'ADMIN',
   };
 
   beforeEach(async () => {
@@ -28,16 +25,16 @@ describe('UsersService', () => {
   it('should create an user', async () => {
     const user = await usersService.create(data);
 
-    expect(user).toMatchObject<IUser>({
+    expect(user).toMatchObject<User>({
       id: expect.any(String),
-      username: data.username,
-      password: data.password,
       email: data.email,
+      password: data.password,
       name: data.name,
+      mobile: null,
       role: 'USER',
-      createdAt: expect.any(Date),
-      updatedAt: expect.any(Date),
-      excludedAt: null,
+      created: expect.any(Date),
+      updated: null,
+      excluded: null,
     });
   });
 
@@ -48,6 +45,6 @@ describe('UsersService', () => {
     expect(async () => {
       const user2 = await usersService.create(data);
       console.log(user2);
-    }).not.toMatchObject<IUser>;
+    }).not.toMatchObject<User>;
   });
 });
