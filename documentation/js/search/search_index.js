var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApplicationModule.html",[0,0.944,1,2.16]],["body/modules/ApplicationModule.html",[0,1.523,1,4.242,2,1.637,3,2.348,4,3.025,5,3.025,6,3.573,7,0.03,8,3.256,9,3.573,10,3.256,11,2.812,12,2.131,13,2.131,14,0.391,15,0.347,16,0.347,17,3.604,18,2.812,19,0.713,20,0.585,21,3.604,22,3.025,23,3.604,24,3.025,25,2.131,26,3.025,27,2.131,28,3.025,29,3.604,30,2.358,31,2.643,32,2.643,33,3.604,34,1.941,35,3.604,36,3.604,37,3.604,38,3.604,39,0.391,40,0.188,41,0.021,42,0.021]],["title/controllers/AuthController.html",[43,1.384,44,2.16]],["body/controllers/AuthController.html",[7,0.03,14,0.378,15,0.336,16,0.336,19,0.74,20,0.566,39,0.378,40,0.182,41,0.02,42,0.02,43,1.951,44,3.045,45,1.584,46,2.926,47,0.422,48,1.331,49,2.15,50,4.653,51,3.905,52,3.487,53,2.297,54,3.487,55,0.975,56,3.487,57,1.234,58,1.056,59,1.142,60,2.44,61,1.234,62,1.804,63,3.487,64,3.487,65,3.487,66,2.282,67,2.282,68,1.462,69,2.061,70,2.282,71,3.487,72,2.297,73,2.557,74,1.161,75,2.557,76,1.161,77,2.061,78,2.585,79,2.926,80,2.926,81,1.584,82,3.487,83,3.487,84,3.487,85,1.234,86,3.487,87,2.282,88,3.487,89,3.487,90,3.487]],["title/guards/AuthGuard.html",[91,2.16,92,1.951]],["body/guards/AuthGuard.html",[7,0.03,14,0.409,15,0.363,16,0.363,19,0.593,20,0.611,39,0.409,40,0.196,41,0.022,42,0.022,47,0.456,48,1.401,55,0.789,57,0.998,58,0.855,59,0.924,60,2.052,61,0.998,85,1.298,92,2.893,93,2.464,94,2.761,95,3.905,96,2.464,97,3.768,98,3.765,99,0.557,100,3.203,101,3.558,102,2.28,103,4.223,104,0.867,105,2.761,106,2.464,107,1.077,108,3.16,109,3.16,110,2.761,111,2.761,112,3.16,113,3.16,114,3.16,115,3.16,116,3.16,117,3.16,118,3.16,119,3.16,120,1.352]],["title/modules/AuthModule.html",[0,0.944,6,1.951]],["body/modules/AuthModule.html",[0,1.279,2,1.491,3,2.205,6,3.803,7,0.03,10,3.169,11,2.641,12,1.941,13,1.941,14,0.356,15,0.317,16,0.317,18,2.641,19,0.752,20,0.533,24,2.755,39,0.356,40,0.171,41,0.02,42,0.02,44,3.323,45,2.029,78,3.154,79,2.755,120,1.179,121,2.755,122,3.283,123,2.755,124,2.755,125,3.478,126,3.478,127,3.283,128,3.277,129,3.75,130,3.283,131,1.768,132,3.283,133,3.283,134,2.755,135,1.941,136,1.941,137,2.755,138,3.283,139,3.283,140,3.283,141,2.755,142,2.408,143,2.408,144,2.755,145,2.755,146,2.755]],["title/injectables/AuthService.html",[78,1.629,104,0.585]],["body/injectables/AuthService.html",[7,0.03,14,0.337,15,0.3,16,0.3,19,0.645,20,0.504,39,0.337,40,0.162,41,0.019,42,0.019,47,0.377,48,1.232,49,2.078,51,3.613,55,1.034,57,1.309,58,1.121,59,1.212,61,1.142,62,1.206,74,1.035,78,2.125,85,1.142,99,0.73,102,1.805,104,0.763,107,1.413,135,1.839,147,1.304,148,2.61,149,4.305,150,1.955,151,2.61,152,2.629,153,4.98,154,3.11,155,4.305,156,3.11,157,3.11,158,4.305,159,1.535,160,2.243,161,3.11,162,1.546,163,3.231,164,2.817,165,2.61,166,2.545,167,0.907,168,1.669,169,3.11,170,4.305,171,3.11,172,3.11,173,2.125,174,1.955,175,3.11,176,3.11,177,3.11,178,3.11,179,3.11,180,3.11]],["title/classes/CreateUserDto.html",[40,0.172,181,1.629]],["body/classes/CreateUserDto.html",[7,0.029,14,0.452,15,0.401,16,0.401,19,0.69,39,0.452,40,0.272,41,0.023,42,0.023,47,0.504,53,2.055,55,1.093,99,0.772,159,1.585,160,2.589,162,2.047,167,0.675,181,2.576,182,2.461,183,4.785,184,3.054,185,2.576,186,4.181,187,3.494,188,3.494,189,3.054,190,2.724,191,2.724,192,2.724,193,2.461,194,2.055,195,3.054]],["title/modules/DocumentModule.html",[0,0.944,8,1.778]],["body/modules/DocumentModule.html",[0,1.626,2,1.878,7,0.029,8,2.799,14,0.449,15,0.399,16,0.501,18,2.444,19,0.688,20,0.671,27,2.444,39,0.449,40,0.216,41,0.023,42,0.023,167,0.922,196,4.134,197,3.032,198,1.878,199,4.361,200,4.134,201,4.134,202,4.134,203,4.134,204,4.134,205,4.134,206,3.47,207,3.47,208,4.134,209,4.134,210,4.134,211,4.134,212,4.134,213,3.032,214,3.032,215,2.227,216,2.705,217,3.032,218,2.444,219,4.134,220,4.134]],["title/interfaces/IUser.html",[221,2.16,222,2.16]],["body/interfaces/IUser.html",[7,0.03,14,0.389,15,0.345,16,0.345,39,0.576,41,0.021,42,0.021,47,0.434,74,1.955,76,1.767,99,0.924,159,1.706,160,2.565,162,2.109,167,0.768,185,2.338,221,2.344,222,3.1,223,3.582,224,2.344,225,3.042,226,2.277,227,3.473,228,4.455,229,3.474,230,3.893,231,3.976,232,3.474,233,3.474,234,2.344,235,3.582]],["title/injectables/JwtAuthGuard.html",[68,1.384,104,0.585]],["body/injectables/JwtAuthGuard.html",[7,0.03,14,0.492,15,0.324,16,0.324,19,0.666,20,0.545,39,0.364,40,0.175,41,0.02,42,0.02,47,0.407,48,1.298,55,1.076,57,1.362,58,1.166,59,1.261,61,1.203,68,1.902,81,1.525,85,1.362,92,1.985,95,2.969,96,2.969,97,3.601,99,0.671,100,2.197,104,0.804,107,0.961,120,1.206,131,1.809,147,1.408,150,1.525,163,2.969,167,0.932,173,2.239,174,1.525,194,1.657,236,2.818,237,4.537,238,2.818,239,4.971,240,3.358,241,3.358,242,4.537,243,3.358,244,5.138,245,1.985,246,2.463,247,3.358,248,3.358,249,2.463,250,3.808,251,3.358,252,2.818,253,2.818,254,3.358,255,3.358,256,3.358]],["title/injectables/JwtStrategy.html",[104,0.585,125,1.951]],["body/injectables/JwtStrategy.html",[7,0.03,14,0.372,15,0.33,16,0.33,19,0.701,20,0.556,30,2.242,32,2.513,39,0.372,40,0.179,41,0.02,42,0.02,47,0.415,48,1.316,49,1.864,55,0.963,57,1.219,58,1.044,59,1.129,61,0.908,62,1.328,72,1.691,74,1.14,81,1.556,85,0.908,99,0.68,104,0.815,107,0.98,125,2.719,131,1.845,136,2.025,143,2.513,147,1.436,150,1.556,151,2.875,152,2.706,162,1.23,163,3.009,165,2.875,167,0.746,168,1.328,173,1.691,174,1.556,194,1.691,226,1.328,249,2.513,257,2.875,258,3.86,259,3.426,260,4.599,261,3.426,262,2.875,263,2.875,264,3.426,265,3.86,266,3.426,267,2.875,268,2.242,269,3.426,270,3.426,271,3.426,272,2.513,273,3.426,274,2.242,275,2.242,276,3.426,277,3.426,278,3.426,279,3.426,280,3.426,281,3.426,282,3.426,283,3.426]],["title/injectables/LocalAuthGuard.html",[70,2.16,104,0.585]],["body/injectables/LocalAuthGuard.html",[7,0.029,14,0.515,15,0.458,16,0.458,19,0.685,20,0.77,39,0.515,40,0.248,41,0.025,42,0.025,70,3.702,92,2.808,104,1.002,131,2.559,147,1.991,194,2.345,284,3.987,285,4.75]],["title/injectables/LocalStrategy.html",[104,0.585,126,1.951]],["body/injectables/LocalStrategy.html",[7,0.03,14,0.358,15,0.318,16,0.318,19,0.692,20,0.535,30,2.16,31,2.421,39,0.358,40,0.172,41,0.02,42,0.02,47,0.4,48,1.283,49,1.829,55,0.94,57,1.189,58,1.018,59,1.101,60,2.395,61,0.875,62,1.28,78,2.514,81,1.5,85,0.875,99,0.663,104,0.795,107,1.458,120,1.186,126,2.651,131,1.778,147,1.384,150,1.5,159,1.563,160,2.482,162,1.962,163,2.935,167,0.826,168,1.739,173,1.63,174,1.5,194,1.63,245,1.952,249,2.421,258,3.764,263,2.771,265,2.771,267,2.771,286,2.771,287,3.302,288,5.894,289,3.302,290,4.485,291,3.302,292,3.302,293,3.302,294,3.302,295,3.302,296,4.485,297,3.302,298,3.302,299,2.771,300,3.302,301,3.302]],["title/controllers/MeController.html",[43,1.384,302,2.16]],["body/controllers/MeController.html",[7,0.03,14,0.269,15,0.239,16,0.239,19,0.69,20,0.403,39,0.269,40,0.129,41,0.016,42,0.016,43,1.04,45,1.127,47,0.301,48,1.048,49,2.18,53,2.373,55,1.007,57,1.275,58,1.091,59,1.18,60,2.388,61,1.275,62,0.962,66,2.397,67,1.624,68,1.04,69,1.467,72,1.808,73,1.82,74,1.6,75,1.82,76,0.826,80,2.083,81,1.127,85,1.275,87,1.624,99,0.711,102,2.25,107,1.467,159,0.658,162,1.564,167,0.87,168,1.864,181,2.373,215,1.973,218,2.166,225,1.973,226,1.864,229,2.687,234,1.624,302,2.397,303,2.083,304,1.82,305,2.397,306,3.511,307,1.624,308,2.083,309,2.482,310,2.89,311,2.482,312,3.194,313,2.482,314,2.482,315,2.482,316,2.482,317,2.373,318,2.482,319,2.166,320,1.624,321,2.397,322,1.337,323,1.82,324,2.345,325,2.083,326,2.482,327,2.083,328,2.482,329,3.194,330,3.655,331,2.849,332,2.482,333,2.482,334,2.482,335,2.482,336,2.482]],["title/injectables/MeService.html",[104,0.585,324,1.778]],["body/injectables/MeService.html",[0,0.499,7,0.03,14,0.189,15,0.168,16,0.168,19,0.592,20,0.283,25,1.031,34,0.94,39,0.189,40,0.091,41,0.012,42,0.018,47,0.211,48,0.799,49,2.007,55,0.914,57,1.158,58,0.991,59,1.072,60,0.731,61,1.297,62,1.083,85,1.235,99,0.646,102,1.673,104,0.495,107,1.499,120,1.003,147,0.731,150,1.268,159,1.389,160,1.983,162,1.254,164,1.827,166,1.031,167,1.008,168,1.806,173,2.155,174,2.115,181,1.97,193,1.031,198,0.792,215,2.634,216,1.141,217,2.048,218,2.359,225,1.504,226,2.129,227,1.141,268,1.141,274,1.141,275,1.141,305,2.856,306,2.611,307,1.827,310,2.737,317,0.861,319,1.031,320,1.141,321,1.827,322,0.94,324,1.504,337,1.464,338,1.279,339,2.927,340,1.744,341,2.048,342,1.744,343,2.048,344,1.744,345,2.048,346,1.744,347,2.048,348,2.93,349,1.744,350,2.343,351,1.464,352,1.279,353,1.031,354,1.464,355,2.56,356,1.464,357,1.279,358,3.202,359,1.464,360,3.349,361,1.464,362,2.048,363,2.927,364,2.359,365,1.464,366,1.464,367,2.284,368,1.464,369,1.464,370,1.464,371,2.343,372,1.464,373,1.279,374,3.349,375,1.464,376,1.464,377,1.464,378,1.464,379,1.464,380,1.464,381,3.349,382,2.343,383,3.349,384,2.93,385,1.464,386,3.349,387,1.279,388,1.464,389,4.104,390,3.349,391,2.048,392,2.343,393,2.343,394,1.464,395,1.464,396,2.048,397,2.93,398,2.93,399,2.343,400,1.464,401,2.343,402,1.464,403,1.464,404,1.464,405,1.464,406,1.464,407,1.464,408,1.279,409,1.464]],["title/guards/MockGuard.html",[91,2.16,410,2.421]],["body/guards/MockGuard.html",[7,0.03,14,0.432,15,0.384,16,0.384,19,0.614,20,0.646,39,0.432,40,0.208,41,0.022,42,0.022,47,0.482,48,1.452,55,0.834,57,1.056,58,0.904,59,0.977,61,1.056,85,1.056,93,2.605,95,3.974,96,2.605,97,3.847,99,0.589,100,3.32,101,3.32,102,2.127,103,4.095,104,0.899,105,2.92,106,2.605,112,3.341,113,3.341,114,3.341,115,3.341,116,3.341,117,3.341,118,3.341,119,3.341,120,1.429,410,3.721,411,3.341,412,3.981]],["title/controllers/RolesController.html",[43,1.384,413,2.16]],["body/controllers/RolesController.html",[7,0.03,14,0.243,15,0.216,16,0.216,19,0.625,20,0.363,34,2.204,39,0.243,40,0.117,41,0.015,42,0.015,43,0.938,45,1.016,47,0.271,48,0.97,49,2.133,53,2.254,55,0.956,57,1.085,58,0.929,59,1.005,61,1.211,62,1.77,66,3.21,67,1.464,68,0.938,69,1.323,74,1.977,76,0.745,77,1.323,81,1.016,85,1.529,87,1.464,99,0.605,107,1.581,159,1.085,167,0.917,168,1.77,213,3.349,226,2.002,304,1.641,310,2.781,312,3.002,319,1.323,322,1.205,329,3.002,331,3.21,364,2.419,367,2.218,413,2.218,414,1.878,415,2.845,416,3.39,417,3.832,418,2.845,419,1.878,420,3.171,421,2.237,422,2.237,423,2.845,424,2.237,425,2.237,426,1.878,427,2.237,428,1.878,429,1.878,430,1.878,431,2.204,432,1.878,433,2.237,434,2.237,435,1.878,436,2.237,437,1.878,438,4.566,439,2.237,440,2.237,441,2.237,442,6.172,443,1.878,444,1.878,445,1.878,446,2.237,447,2.237,448,2.237,449,2.237,450,2.237,451,3.39,452,2.237,453,3.39,454,3.39,455,2.237,456,2.237,457,2.237]],["title/guards/RolesGuard.html",[91,2.16,458,2.16]],["body/guards/RolesGuard.html",[7,0.03,14,0.302,15,0.269,16,0.269,19,0.65,20,0.452,39,0.302,40,0.145,41,0.018,42,0.02,47,0.337,48,1.14,55,0.835,57,1.057,58,0.905,59,0.978,60,1.168,61,0.739,72,1.376,74,0.928,76,1.326,77,1.648,81,1.266,85,1.481,93,1.823,95,3.322,96,2.608,97,3.322,99,0.589,100,1.823,101,2.608,104,0.706,106,1.823,107,1.683,108,2.339,120,1.431,135,1.648,150,1.266,153,4.827,159,1.057,166,1.648,233,2.044,238,2.339,239,4.689,245,1.648,252,2.339,253,2.339,262,3.345,272,3.723,331,2.608,364,1.648,367,1.823,429,2.339,437,2.339,458,2.608,459,2.339,460,2.787,461,2.787,462,2.044,463,3.985,464,2.787,465,3.985,466,2.787,467,2.339,468,5.077,469,2.787,470,2.787,471,2.339,472,2.787,473,2.787,474,2.787,475,2.787,476,2.787,477,2.787,478,2.787,479,2.787,480,2.339,481,3.985,482,3.345,483,3.985,484,2.787,485,2.787,486,2.787,487,2.787,488,2.787,489,2.787,490,2.787]],["title/modules/RolesModule.html",[0,0.944,9,1.951]],["body/modules/RolesModule.html",[0,1.401,2,1.71,3,2.416,7,0.03,8,3.295,9,3.733,11,2.893,12,2.226,13,2.226,14,0.409,15,0.363,16,0.363,18,2.893,19,0.741,20,0.611,22,3.16,39,0.409,40,0.196,41,0.022,42,0.022,45,2.223,58,0.855,128,3.59,167,0.611,197,2.761,198,1.71,413,3.558,431,3.295,432,3.16,491,3.16,492,3.765,493,3.16,494,3.765,495,3.765,496,2.893,497,2.761,498,3.16,499,3.16,500,2.761]],["title/injectables/RolesService.html",[104,0.585,431,1.778]],["body/injectables/RolesService.html",[7,0.03,14,0.235,15,0.209,16,0.209,19,0.618,20,0.352,25,1.281,34,2.162,39,0.235,40,0.113,41,0.015,42,0.015,47,0.262,48,0.947,49,2.118,55,1.013,57,1.191,58,1.02,59,1.103,61,1.191,62,1.742,74,1.495,76,1.495,77,1.281,85,1.45,99,0.664,104,0.586,107,1.604,120,1.441,147,0.909,150,1.503,159,1.064,166,1.281,167,0.978,168,2.057,173,1.633,174,2.04,198,0.984,226,1.977,230,2.427,268,1.418,272,1.59,310,1.782,322,1.167,338,1.59,339,3.294,341,2.427,352,1.59,353,1.281,357,1.59,362,3.294,363,2.427,373,1.59,387,1.59,396,2.944,408,2.427,415,2.777,417,3.77,418,2.777,419,2.777,420,3.136,426,2.777,430,1.819,431,1.782,480,2.777,482,2.777,497,1.59,501,1.819,502,3.309,503,2.167,504,2.167,505,3.309,506,2.167,507,2.167,508,2.167,509,1.819,510,2.167,511,2.167,512,2.167,513,1.819,514,2.167,515,5.1,516,4.492,517,3.309,518,3.309,519,3.309,520,2.167,521,2.167,522,3.309,523,2.167,524,3.309,525,2.777,526,1.819]],["title/classes/UpdateRolesDto.html",[40,0.172,420,1.951]],["body/classes/UpdateRolesDto.html",[7,0.029,14,0.46,15,0.409,16,0.409,19,0.696,39,0.46,40,0.221,41,0.023,42,0.023,47,0.513,55,1.106,76,2.1,77,2.506,99,0.78,159,1.399,167,0.687,182,2.506,185,2.605,189,3.108,190,2.773,191,2.773,194,2.092,195,3.108,226,2.228,420,3.12,497,3.108,527,4.823,528,3.557,529,4.238,530,4.238]],["title/classes/UpdateUserDto.html",[40,0.172,317,1.629]],["body/classes/UpdateUserDto.html",[7,0.029,14,0.445,15,0.396,16,0.396,19,0.686,39,0.445,40,0.27,41,0.023,42,0.023,47,0.497,53,2.026,55,1.084,59,1.46,99,0.765,159,1.577,160,2.573,162,2.034,167,0.666,182,2.427,184,3.011,185,2.553,186,4.154,187,3.446,188,3.446,189,3.011,190,2.686,191,2.686,192,2.686,193,2.427,194,2.026,195,3.011,317,2.553,531,4.754]],["title/classes/User.html",[40,0.172,167,0.535]],["body/classes/User.html",[7,0.03,14,0.324,15,0.288,16,0.288,19,0.667,25,1.764,27,1.764,39,0.524,40,0.218,41,0.018,42,0.018,47,0.361,53,2.72,55,1.155,74,1.608,76,1.392,99,0.868,106,2.737,107,0.854,120,1.88,159,1.515,160,2.194,162,1.88,167,0.678,182,1.764,185,2.065,186,3.068,192,1.953,198,1.355,222,3.16,225,2.601,226,1.873,227,2.737,228,4.053,229,2.189,230,3.068,274,1.953,275,1.953,323,2.189,353,1.764,496,1.764,500,3.068,532,1.953,533,2.984,534,2.984,535,4.183,536,4.183,537,2.984,538,2.984,539,2.984,540,2.984,541,2.984,542,4.393,543,2.984,544,5.713,545,2.984,546,4.183,547,3.511,548,2.984,549,4.393,550,2.984,551,2.984,552,4.183,553,2.984,554,2.505]],["title/controllers/UserController.html",[43,1.384,555,2.16]],["body/controllers/UserController.html",[7,0.03,14,0.246,15,0.218,16,0.218,19,0.687,20,0.367,34,2.22,39,0.246,40,0.118,41,0.015,42,0.015,43,0.949,45,1.028,47,0.274,48,0.978,49,2.204,53,2.434,55,1.033,57,1.218,58,1.042,59,1.127,61,1.307,62,0.877,66,2.237,67,1.481,68,0.949,69,1.338,72,1.688,73,1.66,74,1.726,75,1.66,76,0.753,81,1.028,85,1.375,87,1.481,99,0.679,102,2.324,107,1.411,152,1.872,159,1.505,162,1.771,167,0.745,168,1.912,181,2.267,215,1.842,216,3.005,218,2.021,225,1.219,226,2.309,234,1.481,304,1.66,305,2.237,306,3.005,307,1.481,308,1.899,310,2.793,312,1.66,317,2.267,319,2.021,320,1.481,321,2.237,322,1.219,323,2.508,327,1.899,329,3.368,330,3.459,331,2.697,343,1.66,345,1.66,347,1.66,423,2.87,428,1.899,443,1.899,444,1.899,445,1.899,555,2.237,556,1.899,557,2.263,558,3.419,559,2.263,560,2.263,561,2.263,562,3.419,563,2.263,564,1.899,565,2.263,566,2.263,567,2.263,568,2.263,569,2.263,570,2.263,571,2.263,572,2.263,573,2.263,574,2.263,575,2.263,576,2.263,577,2.263,578,2.263]],["title/modules/UserModule.html",[0,0.944,10,1.778]],["body/modules/UserModule.html",[0,1.216,2,1.387,3,2.098,7,0.03,10,3.371,11,2.513,12,1.805,13,1.805,14,0.331,15,0.294,16,0.294,18,1.805,19,0.765,20,0.495,39,0.331,40,0.159,41,0.019,42,0.019,45,1.931,58,0.693,68,2.475,69,1.805,128,3.118,129,3.568,134,2.563,135,1.805,136,1.805,137,2.563,141,2.563,142,2.24,143,2.24,144,2.563,145,2.563,146,2.563,152,2.867,167,0.495,193,1.805,197,2.24,245,1.805,302,3.199,324,3.1,325,2.563,458,3.199,496,2.513,498,2.563,499,2.563,500,2.24,555,3.199,564,2.563,579,2.563,580,2.563,581,2.563,582,3.054,583,4.251,584,3.054,585,3.054,586,3.054,587,4.89,588,3.054,589,4.251,590,4.251]],["title/injectables/UserService.html",[104,0.585,152,1.499]],["body/injectables/UserService.html",[0,0.38,7,0.03,14,0.144,15,0.128,16,0.128,19,0.526,20,0.215,25,0.785,34,2.34,39,0.144,40,0.069,41,0.01,42,0.017,47,0.161,48,0.639,49,2.05,55,0.91,57,1.084,58,0.928,59,1.003,60,1.21,61,1.368,62,0.865,76,0.442,85,1.3,99,0.604,102,1.989,104,0.396,107,1.534,120,0.802,147,0.557,150,1.014,152,1.014,159,1.396,160,1.973,162,1.76,164,1.461,166,0.785,167,1.011,168,1.9,173,2.017,174,2.071,181,1.67,193,0.785,198,0.603,215,2.456,216,2.843,217,2.767,218,2.001,225,1.202,226,2,227,0.869,232,1.637,268,0.869,274,1.461,275,1.461,305,2.469,306,2.214,307,1.461,310,2.555,317,1.102,319,0.785,320,0.869,321,1.461,322,0.715,338,0.974,339,2.482,341,1.637,343,1.637,345,1.637,347,1.637,348,2.423,350,1.873,351,1.115,352,0.974,353,0.785,354,1.115,355,2.482,356,1.115,357,0.974,358,3.345,359,1.115,360,3.981,361,1.873,362,2.482,363,3.187,364,2.231,365,1.115,366,1.873,367,2.214,368,1.115,369,1.115,370,1.115,371,2.423,372,1.115,373,0.974,374,3.647,375,1.115,376,1.115,377,1.115,378,1.115,379,1.115,380,1.115,381,3.43,382,1.873,383,3.43,384,2.84,385,1.115,386,3.167,387,0.974,388,1.115,389,4.114,390,3.43,391,2.118,392,2.423,393,2.423,394,1.115,395,2.423,396,2.482,397,2.84,398,2.84,399,2.423,400,1.115,401,1.873,402,1.115,403,1.115,404,1.873,405,1.873,406,1.873,407,1.873,408,0.974,409,1.115,509,1.115,513,1.115,525,1.115,591,1.115,592,3.384,593,1.328,594,1.328,595,1.328,596,1.328,597,1.328,598,2.232,599,1.328,600,1.328,601,1.328,602,1.328,603,1.328,604,1.328,605,1.328,606,1.328,607,1.328,608,1.328,609,1.328,610,1.328,611,1.328]],["title/coverage.html",[612,3.764]],["body/coverage.html",[0,0.781,7,0.029,16,0.263,40,0.262,41,0.017,42,0.017,43,2.108,44,1.786,46,2.29,68,1.144,70,1.786,72,1.347,74,0.908,78,1.347,91,3.008,92,1.613,94,2.879,99,0.404,104,1.036,110,2.879,111,2.001,125,1.613,126,1.613,136,1.613,148,2.29,152,1.239,167,0.443,174,1.239,181,1.347,183,2.29,184,2.879,221,1.786,222,1.786,224,1.786,236,2.29,246,2.001,257,2.29,284,2.29,286,2.29,302,1.786,303,2.29,317,1.347,324,1.47,337,2.29,410,2.001,411,2.29,413,1.786,414,2.29,420,1.613,431,1.47,458,1.786,459,2.29,462,2.001,496,1.613,501,2.29,527,2.29,528,2.29,531,2.29,532,2.569,555,1.786,556,2.29,591,2.29,612,2.29,613,2.729,614,2.729,615,2.729,616,6.666,617,5.716,618,3.926,619,6.242,620,3.926,621,3.859,622,3.859,623,6.047,624,2.29,625,2.29,626,2.29,627,2.29,628,3.295,629,2.879,630,2.29,631,3.926,632,3.295,633,5.327,634,2.729,635,2.729,636,2.729]],["title/dependencies.html",[3,1.957,637,2.322]],["body/dependencies.html",[3,2.012,7,0.03,20,0.661,27,2.41,30,3.695,31,2.99,32,2.99,40,0.269,41,0.023,42,0.023,105,2.99,131,2.196,135,2.41,164,2.668,190,2.668,191,2.668,192,2.668,198,1.852,199,3.422,245,2.41,549,3.422,638,5.932,639,4.077,640,4.077,641,4.077,642,4.077,643,4.077,644,4.077,645,4.077,646,4.077,647,4.077,648,4.077,649,4.077,650,4.077,651,4.077,652,4.077,653,4.077,654,4.077,655,4.077,656,4.077,657,4.077,658,4.077]],["title/miscellaneous/enumerations.html",[659,1.257,660,3.327]],["body/miscellaneous/enumerations.html",[7,0.029,41,0.025,42,0.025,47,0.575,76,1.883,167,0.918,224,3.108,231,4.748,232,4.149,233,4.149,659,2.158,660,3.987,661,3.987,662,5.249]],["title/miscellaneous/functions.html",[214,2.907,659,1.257]],["body/miscellaneous/functions.html",[7,0.028,41,0.025,42,0.025,47,0.568,57,1.245,58,1.065,59,1.152,60,1.968,61,1.245,94,3.442,99,0.694,101,3.071,102,1.968,103,3.442,109,3.939,111,4.119,214,3.442,629,3.442,630,5.045,659,2.132,663,3.939,664,4.694]],["title/index.html",[47,0.335,467,2.322,665,2.767]],["body/index.html",[7,0.027,15,0.286,26,3.492,27,3.084,28,2.486,41,0.018,42,0.018,60,1.242,102,1.242,198,1.345,206,4.613,207,2.486,213,2.172,299,2.486,355,2.172,358,3.052,435,2.486,526,2.486,666,5.015,667,4.037,668,2.486,669,2.486,670,2.962,671,4.161,672,4.161,673,2.962,674,2.962,675,2.962,676,4.81,677,2.962,678,2.962,679,4.161,680,2.962,681,4.161,682,2.962,683,2.962,684,4.161,685,2.962,686,2.962,687,2.962,688,2.962,689,2.962,690,2.962,691,2.962,692,2.962,693,2.962,694,2.962,695,2.962,696,2.962,697,2.962,698,2.962,699,2.962,700,5.217,701,2.962,702,2.962,703,4.81,704,2.486,705,2.962,706,2.962,707,2.962,708,2.962,709,2.962,710,2.962,711,2.962,712,2.962,713,2.962,714,2.962,715,2.962,716,4.161,717,2.962,718,2.962,719,2.962,720,4.161,721,4.81,722,4.161,723,2.962,724,2.962,725,2.962,726,2.962,727,2.962,728,2.962,729,2.962,730,2.962,731,2.962,732,2.962,733,2.962,734,2.962,735,2.962,736,2.962,737,2.962,738,2.962,739,2.962,740,2.962,741,2.962,742,2.962,743,2.962,744,2.962,745,2.962,746,2.486,747,2.962,748,2.486,749,4.161,750,2.962,751,2.962,752,2.486,753,2.962,754,2.962,755,2.486,756,2.486,757,2.962,758,2.962,759,2.962,760,2.962,761,2.962,762,2.962,763,2.962,764,2.962,765,2.962,766,2.962,767,2.962,768,2.962,769,2.962,770,2.962,771,2.962,772,2.962,773,2.962,774,2.962,775,2.962,776,2.962,777,2.962,778,2.962,779,2.962]],["title/modules.html",[2,2.037]],["body/modules.html",[1,3.083,2,2.14,6,2.786,7,0.025,8,2.538,9,2.786,10,2.538,41,0.025,42,0.025,746,5.235,748,3.955,780,6.237,781,6.237,782,6.375,783,4.712]],["title/overview.html",[784,3.764]],["body/overview.html",[1,4.148,2,1.565,3,2.279,4,2.892,5,2.892,6,3.807,7,0.029,8,2.995,9,3.604,10,3.444,11,2.729,12,2.037,13,2.037,41,0.02,42,0.02,45,1.565,68,2.182,78,3.009,93,2.255,121,2.892,123,2.892,124,2.892,125,3.078,126,3.078,147,1.445,152,2.769,182,2.037,221,2.255,324,2.804,391,2.527,431,2.804,471,2.892,491,2.892,493,2.892,579,2.892,580,2.892,581,2.892,784,2.892,785,3.446,786,4.617,787,3.446]],["title/properties.html",[185,1.957,637,2.322]],["body/properties.html",[7,0.029,41,0.025,42,0.025,185,2.383,666,4.794,667,4.052,668,4.052,669,4.052,752,4.052,755,4.052,756,4.052,788,4.828,789,4.828,790,4.828,791,4.828,792,4.828,793,4.828]],["title/miscellaneous/typealiases.html",[659,1.257,794,3.964]],["body/miscellaneous/typealiases.html",[7,0.026,41,0.026,42,0.026,47,0.599,99,0.732,224,3.239,234,3.792,353,3.426,532,3.239,547,4.154,659,2.248,661,4.154,795,4.95,796,4.154]],["title/miscellaneous/variables.html",[659,1.257,797,3.327]],["body/miscellaneous/variables.html",[0,1.259,7,0.03,41,0.019,42,0.019,47,0.389,49,1.58,72,2.172,74,1.884,76,1.069,85,0.852,99,0.837,107,0.919,110,2.355,120,1.153,136,2.602,142,2.355,159,1.167,168,1.706,215,1.73,246,3.228,250,2.695,364,1.899,462,3.228,496,2.602,532,2.101,542,5.115,554,2.695,621,2.695,622,4.534,624,3.694,625,4.75,626,3.694,627,2.695,628,2.695,629,2.355,632,2.695,659,1.459,662,5.115,663,2.695,704,2.695,796,2.695,797,2.695,798,5.022,799,4.401,800,3.212,801,4.401,802,3.212,803,4.401,804,3.212,805,3.212,806,3.212,807,3.212,808,3.212,809,3.212,810,3.212,811,3.212,812,3.212,813,3.212,814,3.212,815,4.401,816,3.212,817,3.212,818,3.212,819,3.212]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":789,"title":{},"body":{"properties.html":{}}}],["0.0.2",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":471,"title":{},"body":{"guards/RolesGuard.html":{},"overview.html":{}}}],["1.0.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["2.5.3",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["22:16",{"_index":779,"title":{},"body":{"index.html":{}}}],["3",{"_index":787,"title":{},"body":{"overview.html":{}}}],["300s",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["4",{"_index":786,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":785,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":391,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["9.0.0",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":551,"title":{},"body":{"classes/User.html":{}}}],["_user",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["_user.email",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["_user.roles",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["_user.userid",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":521,"title":{},"body":{"injectables/RolesService.html":{}}}],["added",{"_index":449,"title":{},"body":{"controllers/RolesController.html":{}}}],["address",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["adduserroles",{"_index":415,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["adduserroles(@body",{"_index":450,"title":{},"body":{"controllers/RolesController.html":{}}}],["adduserroles(data",{"_index":419,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["admin",{"_index":231,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/enumerations.html":{}}}],["aggregate",{"_index":511,"title":{},"body":{"injectables/RolesService.html":{}}}],["agplv3",{"_index":793,"title":{},"body":{"properties.html":{}}}],["aliases",{"_index":795,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":683,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":490,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allows",{"_index":211,"title":{},"body":{"modules/DocumentModule.html":{}}}],["already",{"_index":387,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["amazon",{"_index":688,"title":{},"body":{"index.html":{}}}],["ammount",{"_index":731,"title":{},"body":{"index.html":{}}}],["angelon",{"_index":666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["anything",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app_guard",{"_index":587,"title":{},"body":{"modules/UserModule.html":{}}}],["application",{"_index":791,"title":{},"body":{"properties.html":{}}}],["applicationmodule",{"_index":1,"title":{"modules/ApplicationModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules.html":{},"overview.html":{}}}],["appretiate",{"_index":729,"title":{},"body":{"index.html":{}}}],["array",{"_index":437,"title":{},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["arrays",{"_index":478,"title":{},"body":{"guards/RolesGuard.html":{}}}],["ask",{"_index":738,"title":{},"body":{"index.html":{}}}],["assign",{"_index":404,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["async",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["atlas",{"_index":28,"title":{},"body":{"modules/ApplicationModule.html":{},"index.html":{}}}],["auth/auth.module",{"_index":21,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["auth/services/auth.service",{"_index":293,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authcontroller",{"_index":44,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":92,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["authguard('jwt",{"_index":248,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":285,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":752,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":78,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.validateuser(email",{"_index":301,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["available",{"_index":748,"title":{},"body":{"index.html":{},"modules.html":{}}}],["await",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":689,"title":{},"body":{"index.html":{}}}],["azure",{"_index":693,"title":{},"body":{"index.html":{}}}],["back",{"_index":722,"title":{},"body":{"index.html":{}}}],["backend",{"_index":668,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MeService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":392,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["between",{"_index":687,"title":{},"body":{"index.html":{}}}],["bless",{"_index":760,"title":{},"body":{"index.html":{}}}],["blocks",{"_index":712,"title":{},"body":{"index.html":{}}}],["body",{"_index":319,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["boolean",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":630,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":476,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bright",{"_index":775,"title":{},"body":{"index.html":{}}}],["browse",{"_index":782,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":780,"title":{},"body":{"modules.html":{}}}],["building",{"_index":711,"title":{},"body":{"index.html":{}}}],["call",{"_index":438,"title":{},"body":{"controllers/RolesController.html":{}}}],["canactivate",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":374,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["cases",{"_index":359,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["changes",{"_index":740,"title":{},"body":{"index.html":{}}}],["check",{"_index":362,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["choice",{"_index":686,"title":{},"body":{"index.html":{}}}],["church",{"_index":762,"title":{},"body":{"index.html":{}}}],["churches",{"_index":772,"title":{},"body":{"index.html":{}}}],["class",{"_index":40,"title":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["click",{"_index":676,"title":{},"body":{"index.html":{}}}],["closeinmongodconnection",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cloud",{"_index":691,"title":{},"body":{"index.html":{}}}],["cluster_applicationmodule",{"_index":4,"title":{},"body":{"modules/ApplicationModule.html":{},"overview.html":{}}}],["cluster_applicationmodule_imports",{"_index":5,"title":{},"body":{"modules/ApplicationModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":491,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_imports",{"_index":492,"title":{},"body":{"modules/RolesModule.html":{}}}],["cluster_rolesmodule_providers",{"_index":493,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":579,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":580,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":581,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":720,"title":{},"body":{"index.html":{}}}],["collaborate",{"_index":713,"title":{},"body":{"index.html":{}}}],["commit",{"_index":739,"title":{},"body":{"index.html":{}}}],["community",{"_index":757,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":376,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["connection",{"_index":201,"title":{},"body":{"modules/DocumentModule.html":{}}}],["const",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["constructor(moduleref",{"_index":287,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":238,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(usermodel",{"_index":338,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["consultation",{"_index":751,"title":{},"body":{"index.html":{}}}],["contact",{"_index":749,"title":{},"body":{"index.html":{}}}],["contain",{"_index":487,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":253,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":252,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["contextid",{"_index":296,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["contextidfactory",{"_index":292,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["contextidfactory.getbyrequest(request",{"_index":297,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["contibuting",{"_index":736,"title":{},"body":{"index.html":{}}}],["contracting",{"_index":743,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":735,"title":{},"body":{"index.html":{}}}],["controller",{"_index":43,"title":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('me",{"_index":326,"title":{},"body":{"controllers/MeController.html":{}}}],["controller('roles",{"_index":434,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":567,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/auth.controller",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/me.controller",{"_index":586,"title":{},"body":{"modules/UserModule.html":{}}}],["controllers/roles.controller",{"_index":495,"title":{},"body":{"modules/RolesModule.html":{}}}],["controllers/users.controller",{"_index":584,"title":{},"body":{"modules/UserModule.html":{}}}],["coverage",{"_index":612,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":215,"title":{},"body":{"modules/DocumentModule.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":327,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["create(data",{"_index":307,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":181,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["creating",{"_index":375,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["crud",{"_index":35,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["currentdate",{"_index":409,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["currently",{"_index":677,"title":{},"body":{"index.html":{}}}],["data",{"_index":310,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.email",{"_index":383,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["data.password",{"_index":403,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["data.userid",{"_index":516,"title":{},"body":{"injectables/RolesService.html":{}}}],["database",{"_index":355,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["database.module.ts",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":227,"title":{},"body":{"interfaces/IUser.html":{},"injectables/MeService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["david",{"_index":774,"title":{},"body":{"index.html":{}}}],["decide",{"_index":377,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["decoding",{"_index":472,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decorators",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/roles.decorator",{"_index":429,"title":{},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["default",{"_index":542,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":312,"title":{},"body":{"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["delete(':userid",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":684,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":675,"title":{},"body":{"index.html":{}}}],["description",{"_index":790,"title":{},"body":{"properties.html":{}}}],["development",{"_index":702,"title":{},"body":{"index.html":{}}}],["different",{"_index":714,"title":{},"body":{"index.html":{}}}],["disable",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["discord",{"_index":758,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["documentmodule",{"_index":8,"title":{"modules/DocumentModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/DocumentModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["documents",{"_index":512,"title":{},"body":{"injectables/RolesService.html":{}}}],["doesn't",{"_index":371,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["don't",{"_index":385,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["donate",{"_index":716,"title":{},"body":{"index.html":{}}}],["donating",{"_index":734,"title":{},"body":{"index.html":{}}}],["dont",{"_index":520,"title":{},"body":{"injectables/RolesService.html":{}}}],["dotenv",{"_index":199,"title":{},"body":{"modules/DocumentModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":209,"title":{},"body":{"modules/DocumentModule.html":{}}}],["dtos/create",{"_index":320,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/update",{"_index":322,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["email",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["emailconfirmation(boolean",{"_index":379,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["empower",{"_index":761,"title":{},"body":{"index.html":{}}}],["engage",{"_index":709,"title":{},"body":{"index.html":{}}}],["ensureinstance",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":230,"title":{},"body":{"interfaces/IUser.html":{},"injectables/RolesService.html":{},"classes/User.html":{}}}],["enumerations",{"_index":660,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":205,"title":{},"body":{"modules/DocumentModule.html":{}}}],["enviroment",{"_index":202,"title":{},"body":{"modules/DocumentModule.html":{}}}],["err",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":244,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error('user",{"_index":517,"title":{},"body":{"injectables/RolesService.html":{}}}],["eslint",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["eslint/no",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["exception",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exclude",{"_index":218,"title":{},"body":{"modules/DocumentModule.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exclude(@param('userid",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["exclude(@request",{"_index":335,"title":{},"body":{"controllers/MeController.html":{}}}],["exclude(request",{"_index":311,"title":{},"body":{"controllers/MeController.html":{}}}],["exclude(userid",{"_index":343,"title":{},"body":{"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["excludeat",{"_index":225,"title":{},"body":{"interfaces/IUser.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exclusion",{"_index":370,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["exec",{"_index":384,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["executioncontext",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":518,"title":{},"body":{"injectables/RolesService.html":{}}}],["existent",{"_index":525,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["exists",{"_index":363,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["export",{"_index":39,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["field",{"_index":401,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":448,"title":{},"body":{"controllers/RolesController.html":{}}}],["filtering",{"_index":441,"title":{},"body":{"controllers/RolesController.html":{}}}],["financely",{"_index":726,"title":{},"body":{"index.html":{}}}],["find",{"_index":216,"title":{},"body":{"modules/DocumentModule.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finding",{"_index":395,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":305,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('userid",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(@request",{"_index":332,"title":{},"body":{"controllers/MeController.html":{}}}],["findone(request",{"_index":314,"title":{},"body":{"controllers/MeController.html":{}}}],["findone(userid",{"_index":345,"title":{},"body":{"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findonebyemail",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["fix",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":208,"title":{},"body":{"modules/DocumentModule.html":{}}}],["found",{"_index":397,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":674,"title":{},"body":{"index.html":{}}}],["free",{"_index":681,"title":{},"body":{"index.html":{}}}],["function",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":214,"title":{"miscellaneous/functions.html":{}},"body":{"modules/DocumentModule.html":{},"miscellaneous/functions.html":{}}}],["generate",{"_index":550,"title":{},"body":{"classes/User.html":{}}}],["get(':userid",{"_index":423,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["get('profile",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(request",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":467,"title":{"index.html":{}},"body":{"guards/RolesGuard.html":{}}}],["getuserrole",{"_index":502,"title":{},"body":{"injectables/RolesService.html":{}}}],["getuserrole(userid",{"_index":505,"title":{},"body":{"injectables/RolesService.html":{}}}],["getuserroles",{"_index":416,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(@param('userid",{"_index":446,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":422,"title":{},"body":{"controllers/RolesController.html":{}}}],["getusersroles",{"_index":417,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["github",{"_index":741,"title":{},"body":{"index.html":{}}}],["give",{"_index":721,"title":{},"body":{"index.html":{}}}],["gleidson",{"_index":755,"title":{},"body":{"index.html":{},"properties.html":{}}}],["global",{"_index":583,"title":{},"body":{"modules/UserModule.html":{}}}],["god",{"_index":759,"title":{},"body":{"index.html":{}}}],["going",{"_index":694,"title":{},"body":{"index.html":{}}}],["good",{"_index":764,"title":{},"body":{"index.html":{}}}],["google",{"_index":690,"title":{},"body":{"index.html":{}}}],["graph",{"_index":783,"title":{},"body":{"modules.html":{}}}],["great",{"_index":728,"title":{},"body":{"index.html":{}}}],["guard",{"_index":91,"title":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guest",{"_index":233,"title":{},"body":{"interfaces/IUser.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{}}}],["handlerequest",{"_index":237,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(error",{"_index":242,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handling",{"_index":38,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["hash",{"_index":389,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["httpexception",{"_index":350,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":386,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["https://github.com/mikenicholson/passport",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["https://nodkz.github.io/mongodb",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":351,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["httpstatus.conflict",{"_index":388,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":398,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["hydrateddocument",{"_index":547,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MeService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["implementation",{"_index":669,"title":{},"body":{"index.html":{},"properties.html":{}}}],["implements",{"_index":106,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/DocumentModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":352,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["injectmodel(user.name",{"_index":357,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["inmemory",{"_index":29,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["installing",{"_index":699,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":701,"title":{},"body":{"index.html":{}}}],["instances",{"_index":354,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["interface",{"_index":221,"title":{"interfaces/IUser.html":{}},"body":{"interfaces/IUser.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":223,"title":{},"body":{"interfaces/IUser.html":{}}}],["interfaces/user.interface",{"_index":323,"title":{},"body":{"controllers/MeController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["iresponseuser",{"_index":234,"title":{},"body":{"interfaces/IUser.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":246,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["isemail()@prop({unique",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["isnotempty",{"_index":546,"title":{},"body":{"classes/User.html":{}}}],["ispublic",{"_index":250,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iuser",{"_index":222,"title":{"interfaces/IUser.html":{}},"body":{"interfaces/IUser.html":{},"classes/User.html":{},"coverage.html":{}}}],["jesus",{"_index":767,"title":{},"body":{"index.html":{}}}],["join",{"_index":710,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":32,"title":{},"body":{"modules/ApplicationModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt#configure",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtauthguard",{"_index":68,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["jwtfromrequest",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":125,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["kindly",{"_index":737,"title":{},"body":{"index.html":{}}}],["koin",{"_index":770,"title":{},"body":{"index.html":{}}}],["libs/mongoose/database.module",{"_index":22,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/RolesModule.html":{}}}],["libs/passport/constants",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["libs/passport/jwt.guard",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["libs/passport/jwt.strategy",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["libs/passport/local.guard",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["libs/passport/local.strategy",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["libs/passport/public.decorator",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["license",{"_index":792,"title":{},"body":{"properties.html":{}}}],["limit(pagination",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["line",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["linkedin",{"_index":753,"title":{},"body":{"index.html":{}}}],["literal",{"_index":229,"title":{},"body":{"interfaces/IUser.html":{},"controllers/MeController.html":{},"classes/User.html":{}}}],["lm",{"_index":756,"title":{},"body":{"index.html":{},"properties.html":{}}}],["local",{"_index":31,"title":{},"body":{"modules/ApplicationModule.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":70,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":126,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(_user",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(request",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["maintening",{"_index":723,"title":{},"body":{"index.html":{}}}],["manually",{"_index":695,"title":{},"body":{"index.html":{}}}],["many",{"_index":435,"title":{},"body":{"controllers/RolesController.html":{},"index.html":{}}}],["map",{"_index":570,"title":{},"body":{"controllers/UserController.html":{}}}],["maps",{"_index":440,"title":{},"body":{"controllers/RolesController.html":{}}}],["matching",{"_index":42,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mecontroller",{"_index":302,"title":{"controllers/MeController.html":{}},"body":{"controllers/MeController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["memory",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meservice",{"_index":324,"title":{"injectables/MeService.html":{}},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["messenger",{"_index":769,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["microsoft",{"_index":692,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":659,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockguard",{"_index":410,"title":{"guards/MockGuard.html":{}},"body":{"guards/MockGuard.html":{},"coverage.html":{}}}],["mode",{"_index":706,"title":{},"body":{"index.html":{}}}],["model",{"_index":339,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["moderatorconfirmation(boolean",{"_index":380,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["modify",{"_index":718,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/DocumentModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/DocumentModule.html":{},"injectables/MeService.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moduleref",{"_index":288,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/DocumentModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":27,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/DocumentModule.html":{},"classes/User.html":{},"dependencies.html":{},"index.html":{}}}],["mongomemoryserver",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongomemoryserver.create",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongomemoryserver.geturi",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongomemoryserver.stop",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":25,"title":{},"body":{"modules/ApplicationModule.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["mongoosemodule",{"_index":197,"title":{},"body":{"modules/DocumentModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":498,"title":{},"body":{"modules/RolesModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.database_url",{"_index":220,"title":{},"body":{"modules/DocumentModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemoduleoptions",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongose",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":733,"title":{},"body":{"index.html":{}}}],["morning",{"_index":776,"title":{},"body":{"index.html":{}}}],["name",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest.js",{"_index":673,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DocumentModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":245,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":198,"title":{},"body":{"modules/DocumentModule.html":{},"injectables/MeService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/mongoose/dist/mongoose.module",{"_index":585,"title":{},"body":{"modules/UserModule.html":{}}}],["nestjs/passport",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["news",{"_index":765,"title":{},"body":{"index.html":{}}}],["next",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["npm",{"_index":700,"title":{},"body":{"index.html":{}}}],["null",{"_index":228,"title":{},"body":{"interfaces/IUser.html":{},"classes/User.html":{}}}],["object",{"_index":364,"title":{},"body":{"injectables/MeService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":436,"title":{},"body":{"controllers/RolesController.html":{}}}],["object.values(payload.roles",{"_index":484,"title":{},"body":{"guards/RolesGuard.html":{}}}],["object.values(requiredroles",{"_index":486,"title":{},"body":{"guards/RolesGuard.html":{}}}],["objects",{"_index":477,"title":{},"body":{"guards/RolesGuard.html":{}}}],["objetc",{"_index":402,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["observable",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"miscellaneous/functions.html":{}}}],["offspring",{"_index":773,"title":{},"body":{"index.html":{}}}],["omit",{"_index":235,"title":{},"body":{"interfaces/IUser.html":{}}}],["one",{"_index":367,"title":{},"body":{"injectables/MeService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["open",{"_index":717,"title":{},"body":{"index.html":{}}}],["optional",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":784,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":637,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":754,"title":{},"body":{"index.html":{}}}],["param",{"_index":428,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":574,"title":{},"body":{"controllers/UserController.html":{}}}],["paramenter",{"_index":203,"title":{},"body":{"modules/DocumentModule.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":348,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(user",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{}}}],["passport",{"_index":30,"title":{},"body":{"modules/ApplicationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport/constants",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":295,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["passwordmatchs",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":306,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["patch(':userid",{"_index":562,"title":{},"body":{"controllers/UserController.html":{}}}],["patch(request",{"_index":316,"title":{},"body":{"controllers/MeController.html":{}}}],["patch(userid",{"_index":347,"title":{},"body":{"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["payload.email",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles.map((role",{"_index":481,"title":{},"body":{"guards/RolesGuard.html":{}}}],["payload.sub",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permanentely",{"_index":372,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["post",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["post('auth/login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":304,"title":{},"body":{"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["prepare",{"_index":453,"title":{},"body":{"controllers/RolesController.html":{}}}],["private",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MeService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["process.env.secret",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":705,"title":{},"body":{"index.html":{}}}],["professional",{"_index":747,"title":{},"body":{"index.html":{}}}],["project",{"_index":206,"title":{},"body":{"modules/DocumentModule.html":{},"index.html":{}}}],["promise",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["prop",{"_index":544,"title":{},"body":{"classes/User.html":{}}}],["prop()@isnotempty",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["prop({default",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["prop({unique",{"_index":541,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":185,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"properties.html":{}}}],["proprieties",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["propriety",{"_index":368,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":589,"title":{},"body":{"modules/UserModule.html":{}}}],["provided",{"_index":672,"title":{},"body":{"index.html":{}}}],["provider",{"_index":299,"title":{},"body":{"injectables/LocalStrategy.html":{},"index.html":{}}}],["providers",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/MeController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post",{"_index":308,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["public()@useguards(localauthguard)@post('auth/login",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":247,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["pull",{"_index":526,"title":{},"body":{"injectables/RolesService.html":{},"index.html":{}}}],["push",{"_index":523,"title":{},"body":{"injectables/RolesService.html":{}}}],["put",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["query",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["query(filter",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["read",{"_index":732,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["received",{"_index":454,"title":{},"body":{"controllers/RolesController.html":{}}}],["receives",{"_index":360,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["recommend",{"_index":680,"title":{},"body":{"index.html":{}}}],["redistribuite",{"_index":719,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":239,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["regardless",{"_index":730,"title":{},"body":{"index.html":{}}}],["region",{"_index":685,"title":{},"body":{"index.html":{}}}],["remove",{"_index":373,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["removed",{"_index":455,"title":{},"body":{"controllers/RolesController.html":{}}}],["removeuserroles",{"_index":418,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["removeuserroles(@body",{"_index":456,"title":{},"body":{"controllers/RolesController.html":{}}}],["removeuserroles(data",{"_index":426,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["replica",{"_index":697,"title":{},"body":{"index.html":{}}}],["repository",{"_index":742,"title":{},"body":{"index.html":{}}}],["request",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["request.headers.authorization",{"_index":469,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.headers.authorization.split",{"_index":470,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":465,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles",{"_index":463,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.includes(role.guest",{"_index":466,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requires",{"_index":204,"title":{},"body":{"modules/DocumentModule.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":36,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["response",{"_index":442,"title":{},"body":{"controllers/RolesController.html":{}}}],["rest",{"_index":670,"title":{},"body":{"index.html":{}}}],["results",{"_index":41,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["revelation",{"_index":778,"title":{},"body":{"index.html":{}}}],["role",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IUser.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":566,"title":{},"body":{"controllers/UserController.html":{}}}],["role.enum",{"_index":482,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role.guest",{"_index":553,"title":{},"body":{"classes/User.html":{}}}],["role.staff",{"_index":524,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolebasedaccesscontrol",{"_index":37,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["roles",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":433,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles(role.guest",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{}}}],["roles(role.staff",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["roles.dto",{"_index":430,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["roles.dto.ts",{"_index":528,"title":{},"body":{"classes/UpdateRolesDto.html":{},"coverage.html":{}}}],["roles.dto.ts:6",{"_index":530,"title":{},"body":{"classes/UpdateRolesDto.html":{}}}],["roles.dto.ts:7",{"_index":529,"title":{},"body":{"classes/UpdateRolesDto.html":{}}}],["roles/decorators/roles.decorator",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["roles/guards/roles.guard",{"_index":588,"title":{},"body":{"modules/UserModule.html":{}}}],["roles/roles.module",{"_index":23,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["roles_key",{"_index":462,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":413,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":458,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":9,"title":{"modules/RolesModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrequired",{"_index":485,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesrequired.some((role",{"_index":488,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesservice",{"_index":431,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["rolesuser",{"_index":483,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesuser.includes(role",{"_index":489,"title":{},"body":{"guards/RolesGuard.html":{}}}],["root",{"_index":207,"title":{},"body":{"modules/DocumentModule.html":{},"index.html":{}}}],["rounds",{"_index":390,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["route",{"_index":210,"title":{},"body":{"modules/DocumentModule.html":{}}}],["run",{"_index":703,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{},"dependencies.html":{}}}],["save",{"_index":393,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["saved",{"_index":366,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["saves",{"_index":365,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["schema",{"_index":500,"title":{},"body":{"modules/RolesModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":545,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":554,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/user.schema",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MeService.html":{},"classes/UpdateUserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["scheme",{"_index":356,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["scoped",{"_index":298,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["secret",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["selected",{"_index":400,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["self",{"_index":212,"title":{},"body":{"modules/DocumentModule.html":{}}}],["send",{"_index":451,"title":{},"body":{"controllers/RolesController.html":{}}}],["sent",{"_index":768,"title":{},"body":{"index.html":{}}}],["server/docs/guides/migration/migrate7/#no",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":213,"title":{},"body":{"modules/DocumentModule.html":{},"controllers/RolesController.html":{},"index.html":{}}}],["services",{"_index":671,"title":{},"body":{"index.html":{}}}],["services/auth.service",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/me.service",{"_index":325,"title":{},"body":{"controllers/MeController.html":{},"modules/UserModule.html":{}}}],["services/roles.service",{"_index":432,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["services/users.service",{"_index":564,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["session",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["set",{"_index":698,"title":{},"body":{"index.html":{}}}],["setmetadata('roles",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signing",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["sorting",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/ApplicationModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsoring",{"_index":724,"title":{},"body":{"index.html":{}}}],["src/.../auth.guard.ts",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.interface.ts",{"_index":661,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../user.schema.ts",{"_index":796,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/application.module.ts",{"_index":17,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["src/auth/auth.module.ts",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:17",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/controllers/auth.controller.ts:23",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/guards/auth.guard.ts",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/guards/auth.guard.ts:6",{"_index":98,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/services/auth.service.ts",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts:13",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:26",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:7",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/libs/mongoose/database.module.ts",{"_index":196,"title":{},"body":{"modules/DocumentModule.html":{}}}],["src/libs/mongoose/test",{"_index":621,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/libs/passport/constants.ts",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/libs/passport/jwt.guard.ts",{"_index":236,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/libs/passport/jwt.guard.ts:11",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/libs/passport/jwt.guard.ts:15",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/libs/passport/jwt.guard.ts:28",{"_index":243,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/libs/passport/jwt.strategy.ts",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/libs/passport/jwt.strategy.ts:18",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/libs/passport/jwt.strategy.ts:8",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/libs/passport/local.guard.ts",{"_index":284,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/libs/passport/local.strategy.ts",{"_index":286,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/libs/passport/local.strategy.ts:13",{"_index":291,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/libs/passport/local.strategy.ts:8",{"_index":289,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/libs/passport/mock.guard.ts",{"_index":411,"title":{},"body":{"guards/MockGuard.html":{},"coverage.html":{}}}],["src/libs/passport/mock.guard.ts:6",{"_index":412,"title":{},"body":{"guards/MockGuard.html":{}}}],["src/libs/passport/public.decorator.ts",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/roles/controllers/roles.controller.ts",{"_index":414,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/controllers/roles.controller.ts:24",{"_index":425,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/controllers/roles.controller.ts:37",{"_index":424,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/controllers/roles.controller.ts:50",{"_index":421,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/controllers/roles.controller.ts:63",{"_index":427,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/decorators/roles.decorator.ts",{"_index":632,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/dtos/update",{"_index":527,"title":{},"body":{"classes/UpdateRolesDto.html":{},"coverage.html":{}}}],["src/roles/guards/roles.guard.ts",{"_index":459,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles/guards/roles.guard.ts:11",{"_index":461,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/guards/roles.guard.ts:8",{"_index":460,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/roles.module.ts",{"_index":494,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/services/roles.service.ts",{"_index":501,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/services/roles.service.ts:15",{"_index":507,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:24",{"_index":506,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:29",{"_index":504,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:52",{"_index":508,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/services/roles.service.ts:9",{"_index":503,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/controllers/me.controller.ts",{"_index":303,"title":{},"body":{"controllers/MeController.html":{},"coverage.html":{}}}],["src/users/controllers/me.controller.ts:28",{"_index":309,"title":{},"body":{"controllers/MeController.html":{}}}],["src/users/controllers/me.controller.ts:39",{"_index":315,"title":{},"body":{"controllers/MeController.html":{}}}],["src/users/controllers/me.controller.ts:50",{"_index":318,"title":{},"body":{"controllers/MeController.html":{}}}],["src/users/controllers/me.controller.ts:64",{"_index":313,"title":{},"body":{"controllers/MeController.html":{}}}],["src/users/controllers/users.controller.ts",{"_index":556,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/controllers/users.controller.ts:28",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/controllers/users.controller.ts:39",{"_index":560,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/controllers/users.controller.ts:51",{"_index":561,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/controllers/users.controller.ts:62",{"_index":563,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/controllers/users.controller.ts:76",{"_index":559,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/dtos/create",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/update",{"_index":531,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":224,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":532,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:16",{"_index":543,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:22",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:26",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:29",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:32",{"_index":540,"title":{},"body":{"classes/User.html":{}}}],["src/users/services/me.service.ts",{"_index":337,"title":{},"body":{"injectables/MeService.html":{},"coverage.html":{}}}],["src/users/services/me.service.ts:10",{"_index":340,"title":{},"body":{"injectables/MeService.html":{}}}],["src/users/services/me.service.ts:26",{"_index":342,"title":{},"body":{"injectables/MeService.html":{}}}],["src/users/services/me.service.ts:48",{"_index":346,"title":{},"body":{"injectables/MeService.html":{}}}],["src/users/services/me.service.ts:59",{"_index":349,"title":{},"body":{"injectables/MeService.html":{}}}],["src/users/services/me.service.ts:83",{"_index":344,"title":{},"body":{"injectables/MeService.html":{}}}],["src/users/services/users.service.ts",{"_index":591,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts:10",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:121",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:31",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:54",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:61",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:72",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/services/users.service.ts:79",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.module.ts",{"_index":582,"title":{},"body":{"modules/UserModule.html":{}}}],["staff",{"_index":232,"title":{},"body":{"interfaces/IUser.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["star",{"_index":777,"title":{},"body":{"index.html":{}}}],["start",{"_index":704,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:prodtest",{"_index":707,"title":{},"body":{"index.html":{}}}],["started",{"_index":665,"title":{"index.html":{}},"body":{}}],["starting",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["strategies",{"_index":33,"title":{},"body":{"modules/ApplicationModule.html":{}}}],["strategy",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":479,"title":{},"body":{"guards/RolesGuard.html":{}}}],["strongpassword(options",{"_index":378,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":249,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":746,"title":{},"body":{"index.html":{},"modules.html":{}}}],["support@angelon.app",{"_index":750,"title":{},"body":{"index.html":{}}}],["supporting",{"_index":725,"title":{},"body":{"index.html":{}}}],["sure",{"_index":696,"title":{},"body":{"index.html":{}}}],["svg",{"_index":781,"title":{},"body":{"modules.html":{}}}],["table",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":708,"title":{},"body":{"index.html":{}}}],["testdocumentmodule",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["testify",{"_index":763,"title":{},"body":{"index.html":{}}}],["testimony",{"_index":771,"title":{},"body":{"index.html":{}}}],["this.authservice.login(request.user",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.decode(token",{"_index":473,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.jwtservice.sign(user",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meservice.create(data",{"_index":328,"title":{},"body":{"controllers/MeController.html":{}}}],["this.meservice.exclude(request.user.userid",{"_index":336,"title":{},"body":{"controllers/MeController.html":{}}}],["this.meservice.findone(request.user.userid",{"_index":333,"title":{},"body":{"controllers/MeController.html":{}}}],["this.meservice.patch(request.user.userid",{"_index":334,"title":{},"body":{"controllers/MeController.html":{}}}],["this.moduleref.resolve(authservice",{"_index":300,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":251,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":464,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesservice.adduserroles(data",{"_index":452,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserrole(userid",{"_index":447,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getusersroles",{"_index":439,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.removeuserroles(data",{"_index":457,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.usermodel",{"_index":382,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.aggregate",{"_index":510,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.usermodel.find",{"_index":509,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":396,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":408,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["this.userservice.create(data",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.exclude(userid",{"_index":577,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.find",{"_index":569,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(payload.sub",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.findone(userid",{"_index":573,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyemail(email",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.patch(userid",{"_index":575,"title":{},"body":{"controllers/UserController.html":{}}}],["through",{"_index":679,"title":{},"body":{"index.html":{}}}],["throw",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["tier",{"_index":682,"title":{},"body":{"index.html":{}}}],["time",{"_index":369,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["todo",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MeService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["toggle",{"_index":603,"title":{},"body":{"injectables/UserService.html":{}}}],["token",{"_index":468,"title":{},"body":{"guards/RolesGuard.html":{}}}],["transformer",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["transforming",{"_index":475,"title":{},"body":{"guards/RolesGuard.html":{}}}],["true",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":99,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"guards/MockGuard.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":794,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":474,"title":{},"body":{"guards/RolesGuard.html":{}}}],["types",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["unauthorizedexception",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["unique",{"_index":552,"title":{},"body":{"classes/User.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unused",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["unwind",{"_index":514,"title":{},"body":{"injectables/RolesService.html":{}}}],["update",{"_index":217,"title":{},"body":{"modules/DocumentModule.html":{},"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["update(userid",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["updated",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterolesdto",{"_index":420,"title":{"classes/UpdateRolesDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"coverage.html":{}}}],["updates",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":317,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updating",{"_index":399,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["uri",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":200,"title":{},"body":{"modules/DocumentModule.html":{}}}],["use",{"_index":358,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["useexisting",{"_index":590,"title":{},"body":{"modules/UserModule.html":{}}}],["usefactory",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":167,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DocumentModule.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.dto",{"_index":321,"title":{},"body":{"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:7",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:9",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":330,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["user.excludeat",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["user.name",{"_index":499,"title":{},"body":{"modules/RolesModule.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":331,"title":{},"body":{"controllers/MeController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["user.save",{"_index":394,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["user.userid",{"_index":329,"title":{},"body":{"controllers/MeController.html":{},"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["usercontroller",{"_index":555,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":353,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":361,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["userexists",{"_index":381,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["userexists.email",{"_index":406,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["userexists.password",{"_index":405,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["userexists.save",{"_index":407,"title":{},"body":{"injectables/MeService.html":{},"injectables/UserService.html":{}}}],["userfound",{"_index":515,"title":{},"body":{"injectables/RolesService.html":{}}}],["userfound.roles.map((role",{"_index":519,"title":{},"body":{"injectables/RolesService.html":{}}}],["userid",{"_index":226,"title":{},"body":{"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"controllers/MeController.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":341,"title":{},"body":{"injectables/MeService.html":{},"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":10,"title":{"modules/UserModule.html":{}},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":294,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userroles",{"_index":480,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["userroles.includes(data.role",{"_index":522,"title":{},"body":{"injectables/RolesService.html":{}}}],["users",{"_index":34,"title":{},"body":{"modules/ApplicationModule.html":{},"injectables/MeService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.email",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["users.map((users",{"_index":443,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["users.roles",{"_index":445,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["users.userid",{"_index":444,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UserController.html":{}}}],["users/interfaces/user.interface",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{}}}],["users/schemas/user.schema",{"_index":497,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateRolesDto.html":{}}}],["users/services/users.service",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":24,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{}}}],["userschema",{"_index":496,"title":{},"body":{"modules/RolesModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userself",{"_index":219,"title":{},"body":{"modules/DocumentModule.html":{}}}],["userservice",{"_index":152,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":678,"title":{},"body":{"index.html":{}}}],["using",{"_index":26,"title":{},"body":{"modules/ApplicationModule.html":{},"index.html":{}}}],["uuid",{"_index":549,"title":{},"body":{"classes/User.html":{},"dependencies.html":{}}}],["v4",{"_index":548,"title":{},"body":{"classes/User.html":{}}}],["validate",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":290,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validaterequest",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validaterequest(request",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/functions.html":{}}}],["validateuser",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["value",{"_index":662,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":513,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UserService.html":{}}}],["variable",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":797,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"guards/MockGuard.html":{}}}],["verse",{"_index":766,"title":{},"body":{"index.html":{}}}],["version",{"_index":788,"title":{},"body":{"properties.html":{}}}],["warrant",{"_index":745,"title":{},"body":{"index.html":{}}}],["ways",{"_index":715,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":727,"title":{},"body":{"index.html":{}}}],["without",{"_index":744,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/ApplicationModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApplicationModule.html":{"url":"modules/ApplicationModule.html","title":"module - ApplicationModule","body":"\n                   \n\n\n\n\n    Modules\n    ApplicationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApplicationModule\n\n\n\ncluster_ApplicationModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApplicationModule\n\nApplicationModule\n\nApplicationModule -->\n\nAuthModule->ApplicationModule\n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nApplicationModule -->\n\nDocumentModule->ApplicationModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nApplicationModule -->\n\nRolesModule->ApplicationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nApplicationModule -->\n\nUserModule->ApplicationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/application.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DocumentModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { DocumentModule } from './libs/mongoose/database.module';\nimport { RolesModule } from './roles/roles.module';\nimport { UserModule } from './users/users.module';\n\n@Module({\n  imports: [\n    // Mongoose using MongoDB Atlas and InMemory.\n    DocumentModule,\n    // Passport with local and jwt strategies.\n    AuthModule,\n    // Users module with CRUD resources.\n    UserModule,\n    // RoleBasedAccessControl handling.\n    RolesModule,\n  ],\n})\nexport class ApplicationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(LocalAuthGuard)@Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Request, Controller, Post, UseGuards, Get } from '@nestjs/common';\nimport { JwtAuthGuard } from '../../libs/passport/jwt.guard';\nimport { LocalAuthGuard } from '../../libs/passport/local.guard';\nimport { Public } from '../../libs/passport/public.decorator';\nimport { Roles } from '../../roles/decorators/roles.decorator';\nimport { Role } from '../../users/interfaces/user.interface';\nimport { AuthService } from '../services/auth.service';\n\n@Roles(Role.Guest)\n@Controller()\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() request) {\n    return this.authService.login(request.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() request) {\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return validateRequest(request);\n  }\n}\nfunction validateRequest(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request: any,\n): boolean | Promise | Observable {\n  return true;\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from '../libs/passport/local.strategy';\nimport { AuthService } from './services/auth.service';\nimport { UserModule } from '../users/users.module';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from '../libs/passport/constants';\nimport { JwtStrategy } from '../libs/passport/jwt.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule.register({\n      session: true,\n    }),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '300s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/services/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(_user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserService } from '../../users/services/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.userService.findOneByEmail(email);\n    if (user) {\n      const passwordMatchs = await bcrypt.compare(password, user.password);\n      if (passwordMatchs) {\n        return user;\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n    throw new UnauthorizedException();\n  }\n\n  async login(_user: any) {\n    const user = {\n      email: _user.email,\n      sub: _user.userid,\n      roles: _user.roles,\n    };\n\n    return {\n      access_token: this.jwtService.sign(user),\n      user,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsEmail } from 'class-validator';\nimport { User } from '../schemas/user.schema';\n\nexport class CreateUserDto extends PartialType(User) {\n  @IsEmail()\n  email: string;\n\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentModule.html":{"url":"modules/DocumentModule.html","title":"module - DocumentModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/libs/mongoose/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport * as dotenv from 'dotenv';\n\n// MongoDB URL connection is a enviroment paramenter.\n// It requires a \".env\" file in the project root folder.\ndotenv.config();\n\n@Module({\n  imports: [\n    // User Module for '/user/' route, allows self-service functions.\n    // User can only create, find, update, exclude, userself.\n    MongooseModule.forRoot(process.env.DATABASE_URL),\n  ],\n})\nexport class DocumentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            excludeAt\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            userid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        excludeAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        excludeAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Role {\n  Admin = 'admin',\n  Staff = 'staff',\n  User = 'user',\n  Guest = 'guest',\n}\n\nexport interface IUser {\n  userid: string;\n  email: string;\n  password: string;\n  excludeAt: Date | null;\n  roles: [{ enum: Role }];\n}\n\nexport type IResponseUser = Omit & {\n  userid: string;\n  email: string;\n  roles: [{ enum: Role }];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/passport/jwt.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/libs/passport/jwt.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/libs/passport/jwt.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(error, user)\n                \n            \n\n\n            \n                \n                    Defined in src/libs/passport/jwt.guard.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n\n  handleRequest(error, user) {\n    // Throw an exception on \"info\" or \"err\"\n    if (error || !user) {\n      throw error || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/passport/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/libs/passport/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/libs/passport/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserService } from '../../users/services/users.service';\nimport { jwtConstants } from '../passport/constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n      //todo: implement public key for signing https://github.com/mikenicholson/passport-jwt#configure-strategy\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.findOne(payload.sub);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return { userid: payload.sub, email: payload.email, roles: payload.roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/passport/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/passport/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(moduleRef: ModuleRef)\n                    \n                \n                        \n                            \n                                Defined in src/libs/passport/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        moduleRef\n                                                  \n                                                        \n                                                                    ModuleRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/libs/passport/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../../auth/services/auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private moduleRef: ModuleRef) {\n    super({ usernameField: 'email', passReqToCallback: true });\n  }\n\n  async validate(request: Request, email: string, password: string) {\n    const contextId = ContextIdFactory.getByRequest(request);\n    // \"AuthService\" is a request-scoped provider\n    const authService = await this.moduleRef.resolve(AuthService, contextId);\n\n    const user = await authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MeController.html":{"url":"controllers/MeController.html","title":"controller - MeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/me.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                me\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                exclude\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/me.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        exclude\n                        \n                    \n                \n            \n            \n                \n                    \n                    exclude(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/me.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/me.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(request: literal type, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/me.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UpdateUserDto } from '../dtos/update-user.dto';\nimport { Public } from '../../libs/passport/public.decorator';\n\nimport { IResponseUser, Role } from '../interfaces/user.interface';\nimport { JwtAuthGuard } from '../../libs/passport/jwt.guard';\nimport { Roles } from '../../roles/decorators/roles.decorator';\nimport { MeService } from '../services/me.service';\n\n@UseGuards(JwtAuthGuard)\n@Roles(Role.Guest)\n@Controller('me')\nexport class MeController {\n  constructor(private meService: MeService) {}\n\n  @Public()\n  @Post()\n  async create(@Body() data: CreateUserDto): Promise {\n    const user = await this.meService.create(data);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Get()\n  async findOne(@Request() request): Promise {\n    const user = await this.meService.findOne(request.user.userid);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Patch()\n  async patch(\n    @Request() request: { user: { userid: string } },\n    @Body() data: UpdateUserDto,\n  ): Promise {\n    const user = await this.meService.patch(request.user.userid, data);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Delete()\n  async exclude(@Request() request) {\n    const user = await this.meService.exclude(request.user.userid);\n\n    const { excludeAt } = user;\n    return excludeAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MeService.html":{"url":"injectables/MeService.html","title":"injectable - MeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/me.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                exclude\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/me.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/me.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        exclude\n                        \n                    \n                \n            \n            \n                \n                    \n                    exclude(userid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/me.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/me.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(userid: string, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/me.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from 'mongoose';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { User, UserDocument } from '../schemas/user.schema';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UpdateUserDto } from '../dtos/update-user.dto';\n\n@Injectable()\nexport class MeService {\n  // Instances the Database module with the User scheme\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  /* Me Use Cases\n   * create - receives userDto, check if users exists, create the user object and saves in the database. Returns the user saved.\n   * findOne - receives an userid and returns one matching user, if exists.\n   * patch - receives the userid in the request and data in the body to update user data;\n   * exclude - receives an userid and update the \"excludeAt\" user object propriety and returns the date and time of the exclusion. Doesn't permanentely remove the user object from the database.\n   */\n\n  // Create - Use case for creating an user\n  // todo: Implement configuration to decide if: { strongPassword(Options) emailConfirmation(boolean), moderatorConfirmation(boolean) }\n  async create(data: CreateUserDto) {\n    // check if user exists\n    const userExists = await this.userModel\n      .findOne({ email: data.email })\n      .exec();\n    // if does, don't create and throw HttpException\n    if (userExists) {\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\n    }\n    // if not, hash the password:\n    const rounds = 8;\n    const hash = await bcrypt.hash(data.password, rounds);\n    // create the user object\n    const user = new this.userModel({\n      email: data.email,\n      password: hash,\n    });\n    // save and return user.\n    return user.save();\n  }\n\n  // FindOne - Use case for finding one user\n  async findOne(userid: string): Promise {\n    const user = await this.userModel.findOne({ userid: userid }).exec();\n    //\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    //\n    return user;\n  }\n\n  // Patch - Use case for updating selected field in the user objetc\n  async patch(userid: string, data: Partial): Promise {\n    //  find one user matching the userid field\n    const userExists = await this.userModel.findOne({ userid }).exec();\n    // if doesn't,\n    if (!userExists) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    // if data has password\n    if (data.password) {\n      // hash the password,\n      const rounds = 8;\n      const hash = await bcrypt.hash(data.password, rounds);\n      // assign hash for password\n      userExists.password = hash;\n    }\n    // if data has email\n    if (data.email) {\n      userExists.email = data.email;\n    }\n    // save and return user.\n    return userExists.save();\n  }\n\n  // Exclude - Use case for updating an user\n  async exclude(userid: string) {\n    const user = await this.userModel.findOneAndUpdate(\n      { userid },\n      { $currentDate: { excludeAt: true } },\n      { new: true },\n    );\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MockGuard.html":{"url":"guards/MockGuard.html","title":"guard - MockGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MockGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/libs/passport/mock.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/libs/passport/mock.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class MockGuard implements CanActivate {\n  canActivate(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/controllers/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRoles\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                            \n                                    Async\n                                getUsersRoles\n                            \n                            \n                                    Async\n                                removeUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRoles(data: UpdateRolesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRolesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserRoles(userid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userid')\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersRoles()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserRoles(data: UpdateRolesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/roles/controllers/roles.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRolesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../libs/passport/jwt.guard';\nimport { Role } from '../../users/interfaces/user.interface';\nimport { Roles } from '../decorators/roles.decorator';\nimport { UpdateRolesDto } from '../dtos/update-roles.dto';\nimport { RolesService } from '../services/roles.service';\n\n@UseGuards(JwtAuthGuard)\n@Roles(Role.Admin)\n@Controller('roles')\nexport class RolesController {\n  constructor(private rolesService: RolesService) {}\n\n  // Get many User.roles object's array.\n  @Get()\n  async getUsersRoles() {\n    // call roles service return all users\n    const users = await this.rolesService.getUsersRoles();\n    // maps all users, filtering the response\n    const response = users.map((users) => ({\n      userid: users.userid,\n      roles: users.roles,\n    }));\n    // return the response\n    return response;\n  }\n  // Get one User.roles object.\n  @Get(':userid')\n  async getUserRoles(@Param('userid') userid: string) {\n    // call roles service return one user\n    const user = await this.rolesService.getUserRole(userid);\n    // filter user to response\n    const response = {\n      userid: user.userid,\n      roles: user.roles,\n    };\n    // return the response\n    return response;\n  }\n  // Post roles to be added on user.\n  @Post()\n  async addUserRoles(@Body() data: UpdateRolesDto) {\n    // call roles service and send the data object\n    const user = await this.rolesService.addUserRoles(data);\n    // prepare response with the received user\n    const response = {\n      userid: user.userid,\n      roles: user.roles,\n    };\n    // return the response\n    return response;\n  }\n  // Post roles to be removed from user.\n  @Delete()\n  async removeUserRoles(@Body() data: UpdateRolesDto) {\n    // call roles service and send the data object\n    const user = await this.rolesService.removeUserRoles(data);\n    // prepare response with the received user\n    const response = {\n      userid: user.userid,\n      roles: user.roles,\n    };\n    // return the response\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/roles/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/guards/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Reflector } from '@nestjs/core';\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\nimport { Role } from '../../users/interfaces/user.interface';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private jwtService: JwtService) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    // No required roles or Guest, are Public\n    if (!requiredRoles || requiredRoles.includes(Role.Guest)) {\n      return true;\n    }\n    // Getting the token\n    const request = context.switchToHttp().getRequest();\n    if (!request.headers.authorization) {\n      return false;\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      return false;\n    }\n    // Decoding the token\n    const payload = this.jwtService.decode(token);\n    if (typeof payload === 'string') {\n      return false;\n    }\n    // User.roles: Array > Object > String.\n    // Transforming both objects into arrays with only strings for matching.\n    // const userRoles = payload.roles.map((role) => role.enum);\n    // const rolesUser = Object.values(payload.roles);\n    const rolesUser = payload.roles.map((role) => role.enum);\n    const rolesRequired = Object.values(requiredRoles);\n    // Does user.roles contain at least one role required?\n    if (rolesRequired.some((role) => rolesUser.includes(role))) {\n      return true;\n    }\n    // Not allowed.\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_imports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nDocumentModule\n\nDocumentModule\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nDocumentModule->RolesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DocumentModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RolesController } from './controllers/roles.controller';\nimport { RolesService } from './services/roles.service';\nimport { User, UserSchema } from '../users/schemas/user.schema';\nimport { DocumentModule } from '../libs/mongoose/database.module';\n\n@Module({\n  imports: [\n    DocumentModule,\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [RolesController],\n  providers: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/services/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRoles\n                            \n                            \n                                    Async\n                                getUserRole\n                            \n                            \n                                    Async\n                                getUsersRoles\n                            \n                            \n                                    Async\n                                removeUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/roles/services/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRoles(data: UpdateRolesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRolesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserRole(userid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersRoles()\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserRoles(data: UpdateRolesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/services/roles.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRolesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Role } from '../../users/interfaces/user.interface';\nimport { User, UserDocument } from '../../users/schemas/user.schema';\nimport { UpdateRolesDto } from '../dtos/update-roles.dto';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  async getUsersRoles() {\n    // const users = await this.userModel.find();\n    const users = await this.userModel.aggregate([\n      //aggregate all user documents by the roles values.\n      { $unwind: '$roles' },\n    ]);\n    return users;\n  }\n\n  async getUserRole(userid: string) {\n    const user = await this.userModel.findOne({ userid });\n    return user;\n  }\n\n  async addUserRoles(data: UpdateRolesDto) {\n    // check if user exists\n    const userFound = await this.userModel.findOne({ userid: data.userid });\n    if (!userFound) {\n      throw new Error('User does not exist');\n    }\n    // check if user has the role already\n    const userRoles = userFound.roles.map((role) => role.enum);\n    // if they dont, add it.\n    if (userRoles.includes(data.role) === false) {\n      const user = await this.userModel.findOneAndUpdate(\n        { userid: data.userid },\n        {\n          $push: { roles: { enum: Role.Staff } },\n        },\n        { new: true },\n      );\n      return user;\n    }\n    //or just return the existent user with the role.\n    return userFound;\n  }\n\n  async removeUserRoles(data: UpdateRolesDto) {\n    // check if user exists\n    const userFound = await this.userModel.findOne({ userid: data.userid });\n    if (!userFound) {\n      throw new Error('User does not exist');\n    }\n    // check if user has the role\n    const userRoles = userFound.roles.map((role) => role.enum);\n    // if they do, remove it.\n    if (userRoles.includes(data.role) === true) {\n      const user = await this.userModel.findOneAndUpdate(\n        { userid: data.userid },\n        {\n          $pull: { roles: { enum: Role.Staff } },\n        },\n        { new: true },\n      );\n      return user;\n    }\n    //or just return the existent user.\n    return userFound;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesDto.html":{"url":"classes/UpdateRolesDto.html","title":"class - UpdateRolesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dtos/update-roles.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                            \n                                userid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/update-roles.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/roles/dtos/update-roles.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { Role } from '../../users/interfaces/user.interface';\nimport { User } from '../../users/schemas/user.schema';\n\nexport class UpdateRolesDto extends PartialType(User) {\n  userid: string;\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsEmail } from 'class-validator';\nimport { User } from '../schemas/user.schema';\n\nexport class UpdateUserDto extends PartialType(User) {\n  @IsEmail()\n  email?: string;\n\n  password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                excludeAt\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                userid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        excludeAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [literal type]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\nimport { HydratedDocument } from 'mongoose';\nimport { IUser, Role } from '../interfaces/user.interface';\nimport { v4 as uuid } from 'uuid-mongodb';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema()\nexport class User implements IUser {\n  // todo: implement generate uuid from email or _id\n  @Prop({\n    unique: true,\n    default: () => uuid(),\n  })\n  userid: string;\n\n  @IsEmail()\n  @Prop({\n    unique: true,\n  })\n  email: string;\n\n  @Prop()\n  @IsNotEmpty()\n  password: string;\n\n  @Prop({ default: null })\n  excludeAt: Date | null;\n\n  @Prop({ default: [{ enum: Role.Guest }] })\n  roles: [{ enum: Role }];\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                exclude\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        exclude\n                        \n                    \n                \n            \n            \n                \n                    \n                    exclude(userid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':userid')\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userid')\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(userid: string, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':userid')\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  Post,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UpdateUserDto } from '../dtos/update-user.dto';\nimport { UserService } from '../services/users.service';\nimport { IResponseUser } from '../interfaces/user.interface';\nimport { Public } from '../../libs/passport/public.decorator';\nimport { Roles } from '../../roles/decorators/roles.decorator';\nimport { Role } from '../interfaces/user.interface';\nimport { JwtAuthGuard } from '../../libs/passport/jwt.guard';\n\n@UseGuards(JwtAuthGuard)\n@Roles(Role.Staff, Role.Admin)\n@Controller('users')\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Public()\n  @Post()\n  async create(@Body() data: CreateUserDto): Promise {\n    const user = await this.userService.create(data);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Get()\n  async find(): Promise {\n    const users = await this.userService.find();\n\n    //map users and return only userid, email and roles.\n    return users.map((users) => ({\n      userid: users.userid,\n      email: users.email,\n      roles: users.roles,\n    }));\n  }\n\n  @Get(':userid')\n  async findOne(@Param('userid') userid: string): Promise {\n    const user = await this.userService.findOne(userid);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Patch(':userid')\n  async patch(\n    @Param('userid') userid: string,\n    @Body() data: UpdateUserDto,\n  ): Promise {\n    const user = await this.userService.patch(userid, data);\n\n    return {\n      userid: user.userid,\n      email: user.email,\n      roles: user.roles,\n    };\n  }\n\n  @Delete(':userid')\n  async exclude(@Param('userid') userid: string) {\n    const user = await this.userService.exclude(userid);\n\n    return {\n      userid: user.userid,\n      excludeAt: user.excludeAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nUserModule -->\n\nJwtAuthGuard->UserModule\n\n\n\n\n\nMeService\n\nMeService\n\nUserModule -->\n\nMeService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            MeService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            MeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { UserService } from './services/users.service';\nimport { UserController } from './controllers/users.controller';\nimport { MongooseModule } from '@nestjs/mongoose/dist/mongoose.module';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { MeController } from './controllers/me.controller';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from '../roles/guards/roles.guard';\nimport { JwtAuthGuard } from '../libs/passport/jwt.guard';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from '../libs/passport/constants';\nimport { MeService } from './services/me.service';\n\n@Global()\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '300s' },\n    }),\n  ],\n  controllers: [UserController, MeController],\n  providers: [\n    UserService,\n    MeService,\n    {\n      provide: APP_GUARD,\n      useExisting: RolesGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useExisting: JwtAuthGuard,\n    },\n    RolesGuard,\n    JwtAuthGuard,\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                exclude\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        exclude\n                        \n                    \n                \n            \n            \n                \n                    \n                    exclude(userid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(userid: string, data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model } from 'mongoose';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { User, UserDocument } from '../schemas/user.schema';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UpdateUserDto } from '../dtos/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  // Instances the Database module with the User scheme\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  /* Users Use Cases\n   * create - receives userDto, check if users exists, create the user object and saves in the database. Returns the user saved.\n   * put - receives userDto and updates the user, if existent, or create and save a new user.\n   * findOne - receives an userid and returns one matching user, if exists.\n   * findOneByEmail - receives an email and returns one matching user, if exists.\n   * find - receives the request and returns all users.\n   * patch - receives the userid in the request and data in the body to update user data;\n   * staff - receives the userid in the request and toggle staff role;\n   * update - receives email and or password, check if users exists, update the user object in the database. Returns the updated user.\n   * exclude - receives an userid and update the \"excludeAt\" user object propriety and returns the date and time of the exclusion. Doesn't permanentely remove the user object from the database.\n   */\n\n  // Create - Use case for creating an user\n  // todo: Implement configuration to decide if: { strongPassword(Options) emailConfirmation(boolean), moderatorConfirmation(boolean) }\n  async create(data: CreateUserDto) {\n    // check if user exists\n    const userExists = await this.userModel\n      .findOne({ email: data.email })\n      .exec();\n    // if does, don't create and throw HttpException\n    if (userExists) {\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\n    }\n    // if not, hash the password:\n    const rounds = 8;\n    const hash = await bcrypt.hash(data.password, rounds);\n    // create the user object\n    const user = new this.userModel({\n      email: data.email,\n      password: hash,\n    });\n    // save and return user.\n    return user.save();\n  }\n\n  // Find - Use case for finding and query other users\n  // todo: implement { Limit(Pagination), Sorting, Query(Filter) }\n  async find(): Promise {\n    const users = await this.userModel.find();\n    //\n    return users;\n  }\n\n  // FindOne - Use case for finding one user\n  async findOne(userid: string): Promise {\n    const user = await this.userModel.findOne({ userid: userid }).exec();\n    //\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    //\n    return user;\n  }\n\n  // FindOneByEmail - Use case for finding an user by email address\n  async findOneByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    //\n    return user;\n  }\n\n  // Patch - Use case for updating selected field in the user objetc\n  async patch(userid: string, data: Partial): Promise {\n    //  find one user matching the userid field\n    const userExists = await this.userModel.findOne({ userid }).exec();\n    // if doesn't,\n    if (!userExists) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    // if data has password\n    if (data.password) {\n      // hash the password,\n      const rounds = 8;\n      const hash = await bcrypt.hash(data.password, rounds);\n      // assign hash for password\n      userExists.password = hash;\n    }\n    // if data has email\n    if (data.email) {\n      userExists.email = data.email;\n    }\n    // save and return user.\n    return userExists.save();\n  }\n\n  // Update - Use case for updating an user\n  // async update(userid: string, data: UpdateUserDto): Promise {\n  //   // check if user exists\n  //   const userExists = await this.userModel.findOne({ email: data.email });\n  //   // if doesn't,\n  //   if (!userExists) {\n  //     throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n  //   }\n  //   // hash the password,\n  //   const rounds = 8;\n  //   const hash = await bcrypt.hash(data.password, rounds);\n  //   // assign values for proprieties\n  //   userExists.password = hash;\n  //   userExists.email = data.email;\n  //   // return user saved\n  //   return userExists.save();\n  // }\n\n  // Exclude - Use case for updating an user\n  async exclude(userid: string) {\n    const user = await this.userModel.findOneAndUpdate(\n      { userid },\n      { $currentDate: { excludeAt: true } },\n      { new: true },\n    );\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/auth.guard.ts\n            \n            function\n            validateRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/libs/mongoose/test-database.module.ts\n            \n            variable\n            closeInMongodConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/mongoose/test-database.module.ts\n            \n            variable\n            mongoMemoryServer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/mongoose/test-database.module.ts\n            \n            variable\n            TestDocumentModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/passport/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/passport/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/libs/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/libs/passport/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/libs/passport/mock.guard.ts\n            \n            guard\n            MockGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/libs/passport/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/passport/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/controllers/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dtos/update-roles.dto.ts\n            \n            class\n            UpdateRolesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/roles/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/roles/services/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/controllers/me.controller.ts\n            \n            controller\n            MeController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/controllers/users.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/services/me.service.ts\n            \n            injectable\n            MeService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/services/users.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.3\n        \n            mongose : ^0.0.2-security\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            uuid-mongodb : ^2.5.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../user.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/interfaces/user.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Staff\n                            \n                        \n                        \n                            \n                                Value : staff\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Guest\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            validateRequest   (src/.../auth.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/auth/guards/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateRequest\n                        \n                    \n                \n            \n            \n                \nvalidateRequest(request: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngelOn API\nAngelOn API is the backend implementation for the AngelOn project.\nREST services provided using Nest.js framework.\nDeployment\nClick Me\n\nAngelOn currently uses MongoDB database through @nestjs/mongoose. .\nWe recommend you to use MongoDB Atlas. Their free tier service will allow you to deploy MongoDB using the provider and region of your choice between Amazon AWS, Google Cloud and Microsoft Azure.\nIf you are going to deploy MongoDB manually, be sure to a replica set.\nInstalling\n$ npm installRunning\n# development\n$ npm run start\n\n# production mode\n$ npm run start:prodTest\n$ npm run test\n\nEngage\nClick Me\n\nJoin us while we are building our API and other blocks on AngelOn project. We can collaborate in many different ways!\nDonate\nAngelOn is an open source project. You are free to use, modify and redistribuite this code.\nWould you like to give back by maintening, sponsoring and supporting financely this project, we'll great appretiate regardless the ammount you can donate. [Read more about donating for this project.]\nContributing\nWould you like to give back contibuting with code, we kindly ask you to commit your changes through a pull request in our Github repository.\nContracting\nAngelOn is provided without any warrant or promise of support. Professional services are available, contact us at support@angelon.app for a consultation.\n\n\nContact\nClick Me\n\n\nAuthor Linkedin page - Gleidson LM\nCommunity Discord - AngelOn\n\nMay God bless you and empower His church to testify about the Good News.\n\n\nVerse\n\n\"I, Jesus, have sent my messenger (koiné: ἄγγελόν) to give you this testimony for the churches. I am the Root and the Offspring of David, the bright Morning Star.\" Revelation 22:16:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApplicationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApplicationModule\n\n\n\ncluster_ApplicationModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApplicationModule\n\nApplicationModule\n\nApplicationModule -->\n\nAuthModule->ApplicationModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nDocumentModule->RolesModule\n\n\n\nApplicationModule -->\n\nDocumentModule->ApplicationModule\n\n\n\nApplicationModule -->\n\nRolesModule->ApplicationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nApplicationModule -->\n\nUserModule->ApplicationModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nUserModule -->\n\nJwtAuthGuard->UserModule\n\n\n\n\n\nMeService\n\nMeService\n\nUserModule -->\n\nMeService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : AngelOn API is the backend implementation for the AngelOn application.\n        \n            License : AGPLv3\n        \n            Author : Gleidson LM\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IResponseUser   (src/.../user.interface.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/interfaces/user.interface.ts\n    \n    \n        \n            \n                \n                    \n                    IResponseUser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeInMongodConnection   (src/.../test-database.module.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            mongoMemoryServer   (src/.../test-database.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            TestDocumentModule   (src/.../test-database.module.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/libs/mongoose/test-database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        closeInMongodConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  if (mongoMemoryServer) await mongoMemoryServer.stop();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongoMemoryServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MongoMemoryServer\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TestDocumentModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: MongooseModuleOptions = {}) =>\n  MongooseModule.forRootAsync({\n    useFactory: async () => {\n      // fix https://nodkz.github.io/mongodb-memory-server/docs/guides/migration/migrate7/#no-function-other-than-start-create-ensureinstance-will-be-starting-anything\n      mongoMemoryServer = await MongoMemoryServer.create();\n      const uri = mongoMemoryServer.getUri();\n      return {\n        uri,\n        ...options,\n      };\n    },\n  })\n                    \n                \n\n\n        \n    \n\n    src/libs/passport/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/libs/passport/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: `${process.env.SECRET}`,\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
